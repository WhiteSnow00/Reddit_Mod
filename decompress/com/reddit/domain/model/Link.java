// 
// Decompiled by Procyon v0.6.0
// 

package com.reddit.domain.model;

import java.util.LinkedHashMap;
import java.util.ArrayList;
import androidx.viewpager.widget.c;
import android.os.Parcel;
import androidx.appcompat.widget.s0;
import ag0.a;
import kotlin.NoWhenBranchMatchedException;
import com.reddit.domain.model.vote.VoteDirection;
import java.util.Iterator;
import com.reddit.ads.link.models.AdEvent$EventType;
import kotlin.collections.EmptyList;
import ah2.f;
import com.squareup.moshi.n;
import kotlin.jvm.internal.DefaultConstructorMarker;
import com.reddit.domain.model.listing.RecommendationContext;
import com.reddit.ads.domain.PromoLayoutType;
import com.reddit.domain.model.predictions.PostPredictionsTournamentData;
import com.reddit.domain.modtools.ModQueueTriggers;
import com.reddit.mod.notes.domain.model.NoteLabel;
import java.util.Map;
import com.reddit.domain.model.liveaudio.LegacyAudioRoom;
import com.reddit.ads.link.models.AdEvent;
import com.reddit.domain.model.tagging.CrowdsourceTaggingQuestion;
import com.reddit.domain.model.mod.CrowdControlFilterLevel;
import com.reddit.domain.model.mod.BannedBy;
import com.reddit.domain.awards.model.Award;
import com.reddit.domain.awardsleaderboard.AwardLeaderboardStatus;
import java.util.List;
import com.reddit.domain.model.liveaudio.AudioRoom;
import com.reddit.ads.link.models.AppStoreData;
import android.os.Parcelable$Creator;
import kotlin.Metadata;
import com.squareup.moshi.o;
import aw.b;
import com.reddit.domain.model.telemetry.EventCorrelatable;
import android.os.Parcelable;

@DisallowInBundle
@o(generateAdapter = true)
@Metadata(bv = {}, d1 = { "\u0000¬\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\t\n\u0002\b\u0005\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u0006\n\u0002\b\f\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0019\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0003\b\u0081\u0001\n\u0002\u0010\u0000\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0003\b³\u0001\n\u0002\u0018\u0002\n\u0002\b\b\b\u0087\b\u0018\u0000 \u00eb\u00032\u00020\u00012\u00020\u00022\u00020\u00032\u00020\u00042\u00020\u0005:\u0002\u00eb\u0003B\u00c4\f\u0012\t\b\u0002\u0010ª\u0001\u001a\u00020\b\u0012\t\b\u0003\u0010«\u0001\u001a\u00020\b\u0012\t\b\u0003\u0010¬\u0001\u001a\u00020\u000b\u0012\t\b\u0002\u0010\u00ad\u0001\u001a\u00020\b\u0012\u000b\b\u0003\u0010®\u0001\u001a\u0004\u0018\u00010\b\u0012\t\b\u0002\u0010¯\u0001\u001a\u00020\b\u0012\t\b\u0002\u0010°\u0001\u001a\u00020\b\u0012\t\b\u0002\u0010±\u0001\u001a\u00020\u0011\u0012\u000f\b\u0003\u0010²\u0001\u001a\b\u0018\u00010\u0006j\u0002`\u0013\u0012\t\b\u0003\u0010³\u0001\u001a\u00020\u0011\u0012\t\b\u0002\u0010´\u0001\u001a\u00020\u0017\u0012\t\b\u0003\u0010µ\u0001\u001a\u00020\u0011\u0012\t\b\u0003\u0010¶\u0001\u001a\u00020\u000b\u0012\u000b\b\u0003\u0010·\u0001\u001a\u0004\u0018\u00010\u000b\u0012\t\b\u0002\u0010¸\u0001\u001a\u00020\b\u0012\t\b\u0003\u0010¹\u0001\u001a\u00020\b\u0012\t\b\u0003\u0010º\u0001\u001a\u00020\b\u0012\u000b\b\u0003\u0010»\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010¼\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010½\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010¾\u0001\u001a\u0004\u0018\u00010\b\u0012\u0011\b\u0003\u0010¿\u0001\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$\u0012\u0011\b\u0003\u0010\u00c0\u0001\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$\u0012\t\b\u0002\u0010\u00c1\u0001\u001a\u00020\b\u0012\u000b\b\u0003\u0010\u00c2\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u00c3\u0001\u001a\u0004\u0018\u00010\b\u0012\t\b\u0003\u0010\u00c4\u0001\u001a\u00020\u0006\u0012\u000f\b\u0003\u0010\u00c5\u0001\u001a\b\u0012\u0004\u0012\u00020,0$\u0012\u000b\b\u0003\u0010\u00c6\u0001\u001a\u0004\u0018\u00010.\u0012\t\b\u0003\u0010\u00c7\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00c8\u0001\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u00c9\u0001\u001a\u0004\u0018\u00010\b\u0012\t\b\u0003\u0010\u00ca\u0001\u001a\u00020\u0006\u0012\t\b\u0003\u0010\u00cb\u0001\u001a\u00020\u0006\u0012\u000b\b\u0002\u0010\u00cc\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0002\u0010\u00cd\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0002\u0010\u00ce\u0001\u001a\u0004\u0018\u000107\u0012\u000b\b\u0002\u0010\u00cf\u0001\u001a\u0004\u0018\u000107\u0012\u000b\b\u0002\u0010\u00d0\u0001\u001a\u0004\u0018\u00010:\u0012\t\b\u0002\u0010\u00d1\u0001\u001a\u00020\b\u0012\u000b\b\u0003\u0010\u00d2\u0001\u001a\u0004\u0018\u00010\b\u0012\t\b\u0002\u0010\u00d3\u0001\u001a\u00020\b\u0012\t\b\u0003\u0010\u00d4\u0001\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u00d5\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u00d6\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u00d7\u0001\u001a\u0004\u0018\u00010\b\u0012\t\b\u0002\u0010\u00d8\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00d9\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00da\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00db\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00dc\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00dd\u0001\u001a\u00020\u0006\u0012\t\b\u0003\u0010\u00de\u0001\u001a\u00020\u0006\u0012\t\b\u0003\u0010\u00df\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00e0\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00e1\u0001\u001a\u00020\u0006\u0012\t\b\u0003\u0010\u00e2\u0001\u001a\u00020\u0006\u0012\t\b\u0003\u0010\u00e3\u0001\u001a\u00020\u0006\u0012\u000b\b\u0002\u0010\u00e4\u0001\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u00e5\u0001\u001a\u0004\u0018\u00010\b\u0012\t\b\u0002\u0010\u00e6\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00e7\u0001\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u00e8\u0001\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u00e9\u0001\u001a\u0004\u0018\u00010T\u0012\u000b\b\u0003\u0010\u00ea\u0001\u001a\u0004\u0018\u00010\u0011\u0012\t\b\u0003\u0010\u00eb\u0001\u001a\u00020\u0006\u0012\t\b\u0003\u0010\u00ec\u0001\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u00ed\u0001\u001a\u0004\u0018\u00010\b\u0012\u0015\b\u0003\u0010\u00ee\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$\u0012\u0015\b\u0003\u0010\u00ef\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$\u0012\u000b\b\u0002\u0010\u00f0\u0001\u001a\u0004\u0018\u00010]\u0012\u000b\b\u0002\u0010\u00f1\u0001\u001a\u0004\u0018\u00010_\u0012\u0011\b\u0003\u0010\u00f2\u0001\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$\u0012\u000b\b\u0003\u0010\u00f3\u0001\u001a\u0004\u0018\u00010b\u0012\t\b\u0003\u0010\u00f4\u0001\u001a\u00020\u0006\u0012\t\b\u0003\u0010\u00f5\u0001\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u00f6\u0001\u001a\u0004\u0018\u00010\u0006\u0012\u000b\b\u0003\u0010\u00f7\u0001\u001a\u0004\u0018\u00010g\u0012\u0011\b\u0003\u0010\u00f8\u0001\u001a\n\u0012\u0004\u0012\u00020i\u0018\u00010$\u0012\u000b\b\u0003\u0010\u00f9\u0001\u001a\u0004\u0018\u00010k\u0012\u000b\b\u0003\u0010\u00fa\u0001\u001a\u0004\u0018\u00010\b\u0012\u0011\b\u0003\u0010\u00fb\u0001\u001a\n\u0012\u0004\u0012\u00020n\u0018\u00010$\u0012\t\b\u0003\u0010\u00fc\u0001\u001a\u00020\u0006\u0012\u000b\b\u0002\u0010\u00fd\u0001\u001a\u0004\u0018\u00010s\u0012\u0017\b\u0003\u0010\u00fe\u0001\u001a\u0010\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020v\u0018\u00010u\u0012\u000b\b\u0003\u0010\u00ff\u0001\u001a\u0004\u0018\u00010x\u0012\u000b\b\u0003\u0010\u0080\u0002\u001a\u0004\u0018\u00010z\u0012\u000b\b\u0003\u0010\u0081\u0002\u001a\u0004\u0018\u00010|\u0012\u000b\b\u0003\u0010\u0082\u0002\u001a\u0004\u0018\u00010~\u0012\f\b\u0003\u0010\u0083\u0002\u001a\u0005\u0018\u00010\u0080\u0001\u0012\f\b\u0003\u0010\u0084\u0002\u001a\u0005\u0018\u00010\u0082\u0001\u0012\f\b\u0003\u0010\u0085\u0002\u001a\u0005\u0018\u00010\u0084\u0001\u0012\u0010\b\u0002\u0010\u0086\u0002\u001a\t\u0012\u0005\u0012\u00030\u0086\u00010$\u0012\t\b\u0002\u0010\u0087\u0002\u001a\u00020\u0006\u0012\t\b\u0002\u0010\u0088\u0002\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u0089\u0002\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u008a\u0002\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u008b\u0002\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u008c\u0002\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u008d\u0002\u001a\u0004\u0018\u00010\u0006\u0012\u000b\b\u0003\u0010\u008e\u0002\u001a\u0004\u0018\u00010\u0006\u0012\u000b\b\u0003\u0010\u008f\u0002\u001a\u0004\u0018\u00010\b\u0012\t\b\u0003\u0010\u0090\u0002\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u0091\u0002\u001a\u0004\u0018\u00010\u000b\u0012\u000b\b\u0003\u0010\u0092\u0002\u001a\u0004\u0018\u00010\u000b\u0012\t\b\u0003\u0010\u0093\u0002\u001a\u00020\u0006\u0012\f\b\u0003\u0010\u0094\u0002\u001a\u0005\u0018\u00010\u0095\u0001\u0012\u000b\b\u0003\u0010\u0095\u0002\u001a\u0004\u0018\u00010\u0006\u0012\u000b\b\u0003\u0010\u0096\u0002\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u0097\u0002\u001a\u0004\u0018\u00010\u0011\u0012\f\b\u0003\u0010\u0098\u0002\u001a\u0005\u0018\u00010\u009a\u0001\u0012\u000b\b\u0003\u0010\u0099\u0002\u001a\u0004\u0018\u00010\u0006\u0012\u000b\b\u0003\u0010\u009a\u0002\u001a\u0004\u0018\u00010\b\u0012\t\b\u0003\u0010\u009b\u0002\u001a\u00020\u0006\u0012\u000b\b\u0003\u0010\u009c\u0002\u001a\u0004\u0018\u00010\b\u0012\u000b\b\u0003\u0010\u009d\u0002\u001a\u0004\u0018\u00010\b\u0012\u0011\b\u0003\u0010\u009e\u0002\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$\u0012\u000b\b\u0003\u0010\u009f\u0002\u001a\u0004\u0018\u00010\u0011\u0012\u000b\b\u0002\u0010 \u0002\u001a\u0004\u0018\u00010\b\u0012\u0012\b\u0002\u0010¡\u0002\u001a\u000b\u0012\u0005\u0012\u00030¤\u0001\u0018\u00010$\u0012\u000b\b\u0003\u0010¢\u0002\u001a\u0004\u0018\u00010\b\u0012\f\b\u0002\u0010£\u0002\u001a\u0005\u0018\u00010§\u0001\u0012\t\b\u0002\u0010¤\u0002\u001a\u00020\u0006¢\u0006\u0006\b\u00e9\u0003\u0010\u00ea\u0003J\u0006\u0010\u0007\u001a\u00020\u0006J\t\u0010\t\u001a\u00020\bH\u00c6\u0003J\t\u0010\n\u001a\u00020\bH\u00c6\u0003J\t\u0010\f\u001a\u00020\u000bH\u00c6\u0003J\t\u0010\r\u001a\u00020\bH\u00c6\u0003J\u000b\u0010\u000e\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\t\u0010\u000f\u001a\u00020\bH\u00c6\u0003J\t\u0010\u0010\u001a\u00020\bH\u00c6\u0003J\t\u0010\u0012\u001a\u00020\u0011H\u00c6\u0003J\u0016\u0010\u0014\u001a\b\u0018\u00010\u0006j\u0002`\u0013H\u00c6\u0003¢\u0006\u0004\b\u0014\u0010\u0015J\t\u0010\u0016\u001a\u00020\u0011H\u00c6\u0003J\t\u0010\u0018\u001a\u00020\u0017H\u00c6\u0003J\t\u0010\u0019\u001a\u00020\u0011H\u00c6\u0003J\t\u0010\u001a\u001a\u00020\u000bH\u00c6\u0003J\u0012\u0010\u001b\u001a\u0004\u0018\u00010\u000bH\u00c6\u0003¢\u0006\u0004\b\u001b\u0010\u001cJ\t\u0010\u001d\u001a\u00020\bH\u00c6\u0003J\t\u0010\u001e\u001a\u00020\bH\u00c6\u0003J\t\u0010\u001f\u001a\u00020\bH\u00c6\u0003J\u000b\u0010 \u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u0010!\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u0010\"\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u0010#\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u0011\u0010&\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$H\u00c6\u0003J\u0011\u0010'\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$H\u00c6\u0003J\t\u0010(\u001a\u00020\bH\u00c6\u0003J\u000b\u0010)\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u0010*\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\t\u0010+\u001a\u00020\u0006H\u00c6\u0003J\u000f\u0010-\u001a\b\u0012\u0004\u0012\u00020,0$H\u00c6\u0003J\u000b\u0010/\u001a\u0004\u0018\u00010.H\u00c6\u0003J\t\u00100\u001a\u00020\u0006H\u00c6\u0003J\t\u00101\u001a\u00020\u0006H\u00c6\u0003J\u000b\u00102\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\t\u00103\u001a\u00020\u0006H\u00c6\u0003J\t\u00104\u001a\u00020\u0006H\u00c6\u0003J\u000b\u00105\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u00106\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u00108\u001a\u0004\u0018\u000107H\u00c6\u0003J\u000b\u00109\u001a\u0004\u0018\u000107H\u00c6\u0003J\u000b\u0010;\u001a\u0004\u0018\u00010:H\u00c6\u0003J\t\u0010<\u001a\u00020\bH\u00c6\u0003J\u000b\u0010=\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\t\u0010>\u001a\u00020\bH\u00c6\u0003J\t\u0010?\u001a\u00020\u0006H\u00c6\u0003J\u000b\u0010@\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u0010A\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u0010B\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\t\u0010C\u001a\u00020\u0006H\u00c6\u0003J\t\u0010D\u001a\u00020\u0006H\u00c6\u0003J\t\u0010E\u001a\u00020\u0006H\u00c6\u0003J\t\u0010F\u001a\u00020\u0006H\u00c6\u0003J\t\u0010G\u001a\u00020\u0006H\u00c6\u0003J\t\u0010H\u001a\u00020\u0006H\u00c6\u0003J\t\u0010I\u001a\u00020\u0006H\u00c6\u0003J\t\u0010J\u001a\u00020\u0006H\u00c6\u0003J\t\u0010K\u001a\u00020\u0006H\u00c6\u0003J\t\u0010L\u001a\u00020\u0006H\u00c6\u0003J\t\u0010M\u001a\u00020\u0006H\u00c6\u0003J\t\u0010N\u001a\u00020\u0006H\u00c6\u0003J\u000b\u0010O\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u000b\u0010P\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\t\u0010Q\u001a\u00020\u0006H\u00c6\u0003J\t\u0010R\u001a\u00020\u0006H\u00c6\u0003J\t\u0010S\u001a\u00020\u0006H\u00c6\u0003J\u000b\u0010U\u001a\u0004\u0018\u00010TH\u00c6\u0003J\u0012\u0010V\u001a\u0004\u0018\u00010\u0011H\u00c6\u0003¢\u0006\u0004\bV\u0010WJ\t\u0010X\u001a\u00020\u0006H\u00c6\u0003J\t\u0010Y\u001a\u00020\u0006H\u00c6\u0003J\u000b\u0010Z\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u0015\u0010[\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$H\u00c6\u0003J\u0015\u0010\\\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$H\u00c6\u0003J\u000b\u0010^\u001a\u0004\u0018\u00010]H\u00c6\u0003J\u000b\u0010`\u001a\u0004\u0018\u00010_H\u00c6\u0003J\u0011\u0010a\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$H\u00c6\u0003J\u000b\u0010c\u001a\u0004\u0018\u00010bH\u00c6\u0003J\t\u0010d\u001a\u00020\u0006H\u00c6\u0003J\t\u0010e\u001a\u00020\u0006H\u00c6\u0003J\u0012\u0010f\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003¢\u0006\u0004\bf\u0010\u0015J\u000b\u0010h\u001a\u0004\u0018\u00010gH\u00c6\u0003J\u0011\u0010j\u001a\n\u0012\u0004\u0012\u00020i\u0018\u00010$H\u00c6\u0003J\u000b\u0010l\u001a\u0004\u0018\u00010kH\u00c6\u0003J\u000b\u0010m\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u0011\u0010o\u001a\n\u0012\u0004\u0012\u00020n\u0018\u00010$H\u00c6\u0003J\u0010\u0010r\u001a\u00020\u0006H\u00c0\u0003¢\u0006\u0004\bp\u0010qJ\u000b\u0010t\u001a\u0004\u0018\u00010sH\u00c6\u0003J\u0017\u0010w\u001a\u0010\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020v\u0018\u00010uH\u00c6\u0003J\u000b\u0010y\u001a\u0004\u0018\u00010xH\u00c6\u0003J\u000b\u0010{\u001a\u0004\u0018\u00010zH\u00c6\u0003J\u000b\u0010}\u001a\u0004\u0018\u00010|H\u00c6\u0003J\u000b\u0010\u007f\u001a\u0004\u0018\u00010~H\u00c6\u0003J\r\u0010\u0081\u0001\u001a\u0005\u0018\u00010\u0080\u0001H\u00c6\u0003J\r\u0010\u0083\u0001\u001a\u0005\u0018\u00010\u0082\u0001H\u00c6\u0003J\r\u0010\u0085\u0001\u001a\u0005\u0018\u00010\u0084\u0001H\u00c6\u0003J\u0011\u0010\u0087\u0001\u001a\t\u0012\u0005\u0012\u00030\u0086\u00010$H\u00c6\u0003J\n\u0010\u0088\u0001\u001a\u00020\u0006H\u00c6\u0003J\n\u0010\u0089\u0001\u001a\u00020\u0006H\u00c6\u0003J\f\u0010\u008a\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\f\u0010\u008b\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\f\u0010\u008c\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\f\u0010\u008d\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u0014\u0010\u008e\u0001\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003¢\u0006\u0005\b\u008e\u0001\u0010\u0015J\u0014\u0010\u008f\u0001\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003¢\u0006\u0005\b\u008f\u0001\u0010\u0015J\f\u0010\u0090\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\n\u0010\u0091\u0001\u001a\u00020\u0006H\u00c6\u0003J\u0014\u0010\u0092\u0001\u001a\u0004\u0018\u00010\u000bH\u00c6\u0003¢\u0006\u0005\b\u0092\u0001\u0010\u001cJ\u0014\u0010\u0093\u0001\u001a\u0004\u0018\u00010\u000bH\u00c6\u0003¢\u0006\u0005\b\u0093\u0001\u0010\u001cJ\n\u0010\u0094\u0001\u001a\u00020\u0006H\u00c6\u0003J\r\u0010\u0096\u0001\u001a\u0005\u0018\u00010\u0095\u0001H\u00c6\u0003J\u0014\u0010\u0097\u0001\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003¢\u0006\u0005\b\u0097\u0001\u0010\u0015J\f\u0010\u0098\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u0014\u0010\u0099\u0001\u001a\u0004\u0018\u00010\u0011H\u00c6\u0003¢\u0006\u0005\b\u0099\u0001\u0010WJ\r\u0010\u009b\u0001\u001a\u0005\u0018\u00010\u009a\u0001H\u00c6\u0003J\u0014\u0010\u009c\u0001\u001a\u0004\u0018\u00010\u0006H\u00c6\u0003¢\u0006\u0005\b\u009c\u0001\u0010\u0015J\f\u0010\u009d\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\n\u0010\u009e\u0001\u001a\u00020\u0006H\u00c6\u0003J\f\u0010\u009f\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\f\u0010 \u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u0012\u0010¡\u0001\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$H\u00c6\u0003J\u0014\u0010¢\u0001\u001a\u0004\u0018\u00010\u0011H\u00c6\u0003¢\u0006\u0005\b¢\u0001\u0010WJ\f\u0010£\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\u0013\u0010¥\u0001\u001a\u000b\u0012\u0005\u0012\u00030¤\u0001\u0018\u00010$H\u00c6\u0003J\f\u0010¦\u0001\u001a\u0004\u0018\u00010\bH\u00c6\u0003J\r\u0010¨\u0001\u001a\u0005\u0018\u00010§\u0001H\u00c6\u0003J\n\u0010©\u0001\u001a\u00020\u0006H\u00c6\u0003J\u00ce\f\u0010¥\u0002\u001a\u00020\u00002\t\b\u0002\u0010ª\u0001\u001a\u00020\b2\t\b\u0003\u0010«\u0001\u001a\u00020\b2\t\b\u0003\u0010¬\u0001\u001a\u00020\u000b2\t\b\u0002\u0010\u00ad\u0001\u001a\u00020\b2\u000b\b\u0003\u0010®\u0001\u001a\u0004\u0018\u00010\b2\t\b\u0002\u0010¯\u0001\u001a\u00020\b2\t\b\u0002\u0010°\u0001\u001a\u00020\b2\t\b\u0002\u0010±\u0001\u001a\u00020\u00112\u000f\b\u0003\u0010²\u0001\u001a\b\u0018\u00010\u0006j\u0002`\u00132\t\b\u0003\u0010³\u0001\u001a\u00020\u00112\t\b\u0002\u0010´\u0001\u001a\u00020\u00172\t\b\u0003\u0010µ\u0001\u001a\u00020\u00112\t\b\u0003\u0010¶\u0001\u001a\u00020\u000b2\u000b\b\u0003\u0010·\u0001\u001a\u0004\u0018\u00010\u000b2\t\b\u0002\u0010¸\u0001\u001a\u00020\b2\t\b\u0003\u0010¹\u0001\u001a\u00020\b2\t\b\u0003\u0010º\u0001\u001a\u00020\b2\u000b\b\u0003\u0010»\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010¼\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010½\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010¾\u0001\u001a\u0004\u0018\u00010\b2\u0011\b\u0003\u0010¿\u0001\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$2\u0011\b\u0003\u0010\u00c0\u0001\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$2\t\b\u0002\u0010\u00c1\u0001\u001a\u00020\b2\u000b\b\u0003\u0010\u00c2\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u00c3\u0001\u001a\u0004\u0018\u00010\b2\t\b\u0003\u0010\u00c4\u0001\u001a\u00020\u00062\u000f\b\u0003\u0010\u00c5\u0001\u001a\b\u0012\u0004\u0012\u00020,0$2\u000b\b\u0003\u0010\u00c6\u0001\u001a\u0004\u0018\u00010.2\t\b\u0003\u0010\u00c7\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00c8\u0001\u001a\u00020\u00062\u000b\b\u0003\u0010\u00c9\u0001\u001a\u0004\u0018\u00010\b2\t\b\u0003\u0010\u00ca\u0001\u001a\u00020\u00062\t\b\u0003\u0010\u00cb\u0001\u001a\u00020\u00062\u000b\b\u0002\u0010\u00cc\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0002\u0010\u00cd\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0002\u0010\u00ce\u0001\u001a\u0004\u0018\u0001072\u000b\b\u0002\u0010\u00cf\u0001\u001a\u0004\u0018\u0001072\u000b\b\u0002\u0010\u00d0\u0001\u001a\u0004\u0018\u00010:2\t\b\u0002\u0010\u00d1\u0001\u001a\u00020\b2\u000b\b\u0003\u0010\u00d2\u0001\u001a\u0004\u0018\u00010\b2\t\b\u0002\u0010\u00d3\u0001\u001a\u00020\b2\t\b\u0003\u0010\u00d4\u0001\u001a\u00020\u00062\u000b\b\u0003\u0010\u00d5\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u00d6\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u00d7\u0001\u001a\u0004\u0018\u00010\b2\t\b\u0002\u0010\u00d8\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00d9\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00da\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00db\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00dc\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00dd\u0001\u001a\u00020\u00062\t\b\u0003\u0010\u00de\u0001\u001a\u00020\u00062\t\b\u0003\u0010\u00df\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00e0\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00e1\u0001\u001a\u00020\u00062\t\b\u0003\u0010\u00e2\u0001\u001a\u00020\u00062\t\b\u0003\u0010\u00e3\u0001\u001a\u00020\u00062\u000b\b\u0002\u0010\u00e4\u0001\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u00e5\u0001\u001a\u0004\u0018\u00010\b2\t\b\u0002\u0010\u00e6\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00e7\u0001\u001a\u00020\u00062\t\b\u0002\u0010\u00e8\u0001\u001a\u00020\u00062\u000b\b\u0003\u0010\u00e9\u0001\u001a\u0004\u0018\u00010T2\u000b\b\u0003\u0010\u00ea\u0001\u001a\u0004\u0018\u00010\u00112\t\b\u0003\u0010\u00eb\u0001\u001a\u00020\u00062\t\b\u0003\u0010\u00ec\u0001\u001a\u00020\u00062\u000b\b\u0003\u0010\u00ed\u0001\u001a\u0004\u0018\u00010\b2\u0015\b\u0003\u0010\u00ee\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$2\u0015\b\u0003\u0010\u00ef\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$2\u000b\b\u0002\u0010\u00f0\u0001\u001a\u0004\u0018\u00010]2\u000b\b\u0002\u0010\u00f1\u0001\u001a\u0004\u0018\u00010_2\u0011\b\u0003\u0010\u00f2\u0001\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$2\u000b\b\u0003\u0010\u00f3\u0001\u001a\u0004\u0018\u00010b2\t\b\u0003\u0010\u00f4\u0001\u001a\u00020\u00062\t\b\u0003\u0010\u00f5\u0001\u001a\u00020\u00062\u000b\b\u0003\u0010\u00f6\u0001\u001a\u0004\u0018\u00010\u00062\u000b\b\u0003\u0010\u00f7\u0001\u001a\u0004\u0018\u00010g2\u0011\b\u0003\u0010\u00f8\u0001\u001a\n\u0012\u0004\u0012\u00020i\u0018\u00010$2\u000b\b\u0003\u0010\u00f9\u0001\u001a\u0004\u0018\u00010k2\u000b\b\u0003\u0010\u00fa\u0001\u001a\u0004\u0018\u00010\b2\u0011\b\u0003\u0010\u00fb\u0001\u001a\n\u0012\u0004\u0012\u00020n\u0018\u00010$2\t\b\u0003\u0010\u00fc\u0001\u001a\u00020\u00062\u000b\b\u0002\u0010\u00fd\u0001\u001a\u0004\u0018\u00010s2\u0017\b\u0003\u0010\u00fe\u0001\u001a\u0010\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020v\u0018\u00010u2\u000b\b\u0003\u0010\u00ff\u0001\u001a\u0004\u0018\u00010x2\u000b\b\u0003\u0010\u0080\u0002\u001a\u0004\u0018\u00010z2\u000b\b\u0003\u0010\u0081\u0002\u001a\u0004\u0018\u00010|2\u000b\b\u0003\u0010\u0082\u0002\u001a\u0004\u0018\u00010~2\f\b\u0003\u0010\u0083\u0002\u001a\u0005\u0018\u00010\u0080\u00012\f\b\u0003\u0010\u0084\u0002\u001a\u0005\u0018\u00010\u0082\u00012\f\b\u0003\u0010\u0085\u0002\u001a\u0005\u0018\u00010\u0084\u00012\u0010\b\u0002\u0010\u0086\u0002\u001a\t\u0012\u0005\u0012\u00030\u0086\u00010$2\t\b\u0002\u0010\u0087\u0002\u001a\u00020\u00062\t\b\u0002\u0010\u0088\u0002\u001a\u00020\u00062\u000b\b\u0003\u0010\u0089\u0002\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u008a\u0002\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u008b\u0002\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u008c\u0002\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u008d\u0002\u001a\u0004\u0018\u00010\u00062\u000b\b\u0003\u0010\u008e\u0002\u001a\u0004\u0018\u00010\u00062\u000b\b\u0003\u0010\u008f\u0002\u001a\u0004\u0018\u00010\b2\t\b\u0003\u0010\u0090\u0002\u001a\u00020\u00062\u000b\b\u0003\u0010\u0091\u0002\u001a\u0004\u0018\u00010\u000b2\u000b\b\u0003\u0010\u0092\u0002\u001a\u0004\u0018\u00010\u000b2\t\b\u0003\u0010\u0093\u0002\u001a\u00020\u00062\f\b\u0003\u0010\u0094\u0002\u001a\u0005\u0018\u00010\u0095\u00012\u000b\b\u0003\u0010\u0095\u0002\u001a\u0004\u0018\u00010\u00062\u000b\b\u0003\u0010\u0096\u0002\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u0097\u0002\u001a\u0004\u0018\u00010\u00112\f\b\u0003\u0010\u0098\u0002\u001a\u0005\u0018\u00010\u009a\u00012\u000b\b\u0003\u0010\u0099\u0002\u001a\u0004\u0018\u00010\u00062\u000b\b\u0003\u0010\u009a\u0002\u001a\u0004\u0018\u00010\b2\t\b\u0003\u0010\u009b\u0002\u001a\u00020\u00062\u000b\b\u0003\u0010\u009c\u0002\u001a\u0004\u0018\u00010\b2\u000b\b\u0003\u0010\u009d\u0002\u001a\u0004\u0018\u00010\b2\u0011\b\u0003\u0010\u009e\u0002\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$2\u000b\b\u0003\u0010\u009f\u0002\u001a\u0004\u0018\u00010\u00112\u000b\b\u0002\u0010 \u0002\u001a\u0004\u0018\u00010\b2\u0012\b\u0002\u0010¡\u0002\u001a\u000b\u0012\u0005\u0012\u00030¤\u0001\u0018\u00010$2\u000b\b\u0003\u0010¢\u0002\u001a\u0004\u0018\u00010\b2\f\b\u0002\u0010£\u0002\u001a\u0005\u0018\u00010§\u00012\t\b\u0002\u0010¤\u0002\u001a\u00020\u0006H\u00c6\u0001¢\u0006\u0006\b¥\u0002\u0010¦\u0002J\n\u0010§\u0002\u001a\u00020\bH\u00d6\u0001J\n\u0010¨\u0002\u001a\u00020\u0011H\u00d6\u0001J\u0016\u0010«\u0002\u001a\u00020\u00062\n\u0010ª\u0002\u001a\u0005\u0018\u00010©\u0002H\u00d6\u0003J\n\u0010¬\u0002\u001a\u00020\u0011H\u00d6\u0001J\u001e\u0010±\u0002\u001a\u00030°\u00022\b\u0010®\u0002\u001a\u00030\u00ad\u00022\u0007\u0010¯\u0002\u001a\u00020\u0011H\u00d6\u0001R\u001f\u0010ª\u0001\u001a\u00020\b8\u0016X\u0096\u0004¢\u0006\u0010\n\u0006\bª\u0001\u0010²\u0002\u001a\u0006\b³\u0002\u0010´\u0002R\u001f\u0010«\u0001\u001a\u00020\b8\u0016X\u0096\u0004¢\u0006\u0010\n\u0006\b«\u0001\u0010²\u0002\u001a\u0006\bµ\u0002\u0010´\u0002R\u001f\u0010¬\u0001\u001a\u00020\u000b8\u0016X\u0096\u0004¢\u0006\u0010\n\u0006\b¬\u0001\u0010¶\u0002\u001a\u0006\b·\u0002\u0010¸\u0002R\u001f\u0010\u00ad\u0001\u001a\u00020\b8\u0016X\u0096\u0004¢\u0006\u0010\n\u0006\b\u00ad\u0001\u0010²\u0002\u001a\u0006\b¹\u0002\u0010´\u0002R\u001e\u0010®\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b®\u0001\u0010²\u0002\u001a\u0006\bº\u0002\u0010´\u0002R\u001c\u0010¯\u0001\u001a\u00020\b8\u0006¢\u0006\u0010\n\u0006\b¯\u0001\u0010²\u0002\u001a\u0006\b»\u0002\u0010´\u0002R\u001c\u0010°\u0001\u001a\u00020\b8\u0006¢\u0006\u0010\n\u0006\b°\u0001\u0010²\u0002\u001a\u0006\b¼\u0002\u0010´\u0002R\u001c\u0010±\u0001\u001a\u00020\u00118\u0006¢\u0006\u0010\n\u0006\b±\u0001\u0010½\u0002\u001a\u0006\b¾\u0002\u0010¿\u0002R!\u0010²\u0001\u001a\b\u0018\u00010\u0006j\u0002`\u00138\u0006¢\u0006\u000f\n\u0006\b²\u0001\u0010\u00c0\u0002\u001a\u0005\b\u00c1\u0002\u0010\u0015R\u001c\u0010³\u0001\u001a\u00020\u00118\u0006¢\u0006\u0010\n\u0006\b³\u0001\u0010½\u0002\u001a\u0006\b\u00c2\u0002\u0010¿\u0002R\u001c\u0010´\u0001\u001a\u00020\u00178\u0006¢\u0006\u0010\n\u0006\b´\u0001\u0010\u00c3\u0002\u001a\u0006\b\u00c4\u0002\u0010\u00c5\u0002R\u001c\u0010µ\u0001\u001a\u00020\u00118\u0006¢\u0006\u0010\n\u0006\bµ\u0001\u0010½\u0002\u001a\u0006\b\u00c6\u0002\u0010¿\u0002R\u001c\u0010¶\u0001\u001a\u00020\u000b8\u0006¢\u0006\u0010\n\u0006\b¶\u0001\u0010¶\u0002\u001a\u0006\b\u00c7\u0002\u0010¸\u0002R\u001d\u0010·\u0001\u001a\u0004\u0018\u00010\u000b8\u0006¢\u0006\u000f\n\u0006\b·\u0001\u0010\u00c8\u0002\u001a\u0005\b\u00c9\u0002\u0010\u001cR\u001f\u0010¸\u0001\u001a\u00020\b8\u0016X\u0096\u0004¢\u0006\u0010\n\u0006\b¸\u0001\u0010²\u0002\u001a\u0006\b\u00ca\u0002\u0010´\u0002R\u001f\u0010¹\u0001\u001a\u00020\b8\u0016X\u0096\u0004¢\u0006\u0010\n\u0006\b¹\u0001\u0010²\u0002\u001a\u0006\b\u00cb\u0002\u0010´\u0002R\u001c\u0010º\u0001\u001a\u00020\b8\u0006¢\u0006\u0010\n\u0006\bº\u0001\u0010²\u0002\u001a\u0006\b\u00cc\u0002\u0010´\u0002R\u001e\u0010»\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b»\u0001\u0010²\u0002\u001a\u0006\b\u00cd\u0002\u0010´\u0002R\u001e\u0010¼\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b¼\u0001\u0010²\u0002\u001a\u0006\b\u00ce\u0002\u0010´\u0002R\u001e\u0010½\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b½\u0001\u0010²\u0002\u001a\u0006\b\u00cf\u0002\u0010´\u0002R\u001e\u0010¾\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b¾\u0001\u0010²\u0002\u001a\u0006\b\u00d0\u0002\u0010´\u0002R$\u0010¿\u0001\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$8\u0006¢\u0006\u0010\n\u0006\b¿\u0001\u0010\u00d1\u0002\u001a\u0006\b\u00d2\u0002\u0010\u00d3\u0002R$\u0010\u00c0\u0001\u001a\n\u0012\u0004\u0012\u00020%\u0018\u00010$8\u0006¢\u0006\u0010\n\u0006\b\u00c0\u0001\u0010\u00d1\u0002\u001a\u0006\b\u00d4\u0002\u0010\u00d3\u0002R\u001c\u0010\u00c1\u0001\u001a\u00020\b8\u0006¢\u0006\u0010\n\u0006\b\u00c1\u0001\u0010²\u0002\u001a\u0006\b\u00d5\u0002\u0010´\u0002R\u001e\u0010\u00c2\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00c2\u0001\u0010²\u0002\u001a\u0006\b\u00d6\u0002\u0010´\u0002R\u001e\u0010\u00c3\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00c3\u0001\u0010²\u0002\u001a\u0006\b\u00d7\u0002\u0010´\u0002R\u001b\u0010\u00c4\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00c4\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00d9\u0002\u0010qR\"\u0010\u00c5\u0001\u001a\b\u0012\u0004\u0012\u00020,0$8\u0006¢\u0006\u0010\n\u0006\b\u00c5\u0001\u0010\u00d1\u0002\u001a\u0006\b\u00da\u0002\u0010\u00d3\u0002R\u001e\u0010\u00c6\u0001\u001a\u0004\u0018\u00010.8\u0006¢\u0006\u0010\n\u0006\b\u00c6\u0001\u0010\u00db\u0002\u001a\u0006\b\u00dc\u0002\u0010\u00dd\u0002R\u001b\u0010\u00c7\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00c7\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00de\u0002\u0010qR\u001b\u0010\u00c8\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00c8\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00df\u0002\u0010qR\u001e\u0010\u00c9\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00c9\u0001\u0010²\u0002\u001a\u0006\b\u00e0\u0002\u0010´\u0002R\u001b\u0010\u00ca\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00ca\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00e1\u0002\u0010qR\u001b\u0010\u00cb\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00cb\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00e2\u0002\u0010qR\u001e\u0010\u00cc\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00cc\u0001\u0010²\u0002\u001a\u0006\b\u00e3\u0002\u0010´\u0002R\u001e\u0010\u00cd\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00cd\u0001\u0010²\u0002\u001a\u0006\b\u00e4\u0002\u0010´\u0002R\u001e\u0010\u00ce\u0001\u001a\u0004\u0018\u0001078\u0006¢\u0006\u0010\n\u0006\b\u00ce\u0001\u0010\u00e5\u0002\u001a\u0006\b\u00e6\u0002\u0010\u00e7\u0002R\u001e\u0010\u00cf\u0001\u001a\u0004\u0018\u0001078\u0006¢\u0006\u0010\n\u0006\b\u00cf\u0001\u0010\u00e5\u0002\u001a\u0006\b\u00e8\u0002\u0010\u00e7\u0002R\u001e\u0010\u00d0\u0001\u001a\u0004\u0018\u00010:8\u0006¢\u0006\u0010\n\u0006\b\u00d0\u0001\u0010\u00e9\u0002\u001a\u0006\b\u00ea\u0002\u0010\u00eb\u0002R\u001c\u0010\u00d1\u0001\u001a\u00020\b8\u0006¢\u0006\u0010\n\u0006\b\u00d1\u0001\u0010²\u0002\u001a\u0006\b\u00ec\u0002\u0010´\u0002R\u001e\u0010\u00d2\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00d2\u0001\u0010²\u0002\u001a\u0006\b\u00ed\u0002\u0010´\u0002R\u001c\u0010\u00d3\u0001\u001a\u00020\b8\u0006¢\u0006\u0010\n\u0006\b\u00d3\u0001\u0010²\u0002\u001a\u0006\b\u00ee\u0002\u0010´\u0002R\u001b\u0010\u00d4\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00d4\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00d4\u0001\u0010qR\u001e\u0010\u00d5\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00d5\u0001\u0010²\u0002\u001a\u0006\b\u00ef\u0002\u0010´\u0002R\u001e\u0010\u00d6\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00d6\u0001\u0010²\u0002\u001a\u0006\b\u00f0\u0002\u0010´\u0002R\u001e\u0010\u00d7\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00d7\u0001\u0010²\u0002\u001a\u0006\b\u00f1\u0002\u0010´\u0002R\u001b\u0010\u00d8\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00d8\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f2\u0002\u0010qR\u001b\u0010\u00d9\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00d9\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f3\u0002\u0010qR\u001b\u0010\u00da\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00da\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f4\u0002\u0010qR\u001b\u0010\u00db\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00db\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f5\u0002\u0010qR\u001b\u0010\u00dc\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00dc\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f6\u0002\u0010qR\u001b\u0010\u00dd\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00dd\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f7\u0002\u0010qR\u001b\u0010\u00de\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00de\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f8\u0002\u0010qR\u001b\u0010\u00df\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00df\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f9\u0002\u0010qR\u001b\u0010\u00e0\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00e0\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00fa\u0002\u0010qR\u001b\u0010\u00e1\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00e1\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00fb\u0002\u0010qR\u001b\u0010\u00e2\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00e2\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00fc\u0002\u0010qR\u001b\u0010\u00e3\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00e3\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00fd\u0002\u0010qR\u001e\u0010\u00e4\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00e4\u0001\u0010²\u0002\u001a\u0006\b\u00fe\u0002\u0010´\u0002R\u001e\u0010\u00e5\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00e5\u0001\u0010²\u0002\u001a\u0006\b\u00ff\u0002\u0010´\u0002R\u001b\u0010\u00e6\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00e6\u0001\u0010\u00d8\u0002\u001a\u0005\b\u0080\u0003\u0010qR\u001b\u0010\u00e7\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00e7\u0001\u0010\u00d8\u0002\u001a\u0005\b\u0081\u0003\u0010qR\u001b\u0010\u00e8\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00e8\u0001\u0010\u00d8\u0002\u001a\u0005\b\u0082\u0003\u0010qR\u001e\u0010\u00e9\u0001\u001a\u0004\u0018\u00010T8\u0006¢\u0006\u0010\n\u0006\b\u00e9\u0001\u0010\u0083\u0003\u001a\u0006\b\u0084\u0003\u0010\u0085\u0003R\u001d\u0010\u00ea\u0001\u001a\u0004\u0018\u00010\u00118\u0006¢\u0006\u000f\n\u0006\b\u00ea\u0001\u0010\u0086\u0003\u001a\u0005\b\u0087\u0003\u0010WR\u001b\u0010\u00eb\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00eb\u0001\u0010\u00d8\u0002\u001a\u0005\b\u0088\u0003\u0010qR\u001b\u0010\u00ec\u0001\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u00ec\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00ec\u0001\u0010qR\u001e\u0010\u00ed\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00ed\u0001\u0010²\u0002\u001a\u0006\b\u0089\u0003\u0010´\u0002R(\u0010\u00ee\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$8\u0006¢\u0006\u0010\n\u0006\b\u00ee\u0001\u0010\u00d1\u0002\u001a\u0006\b\u008a\u0003\u0010\u00d3\u0002R(\u0010\u00ef\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\b0$0$8\u0006¢\u0006\u0010\n\u0006\b\u00ef\u0001\u0010\u00d1\u0002\u001a\u0006\b\u008b\u0003\u0010\u00d3\u0002R\u001e\u0010\u00f0\u0001\u001a\u0004\u0018\u00010]8\u0006¢\u0006\u0010\n\u0006\b\u00f0\u0001\u0010\u008c\u0003\u001a\u0006\b\u008d\u0003\u0010\u008e\u0003R\u001e\u0010\u00f1\u0001\u001a\u0004\u0018\u00010_8\u0006¢\u0006\u0010\n\u0006\b\u00f1\u0001\u0010\u008f\u0003\u001a\u0006\b\u0090\u0003\u0010\u0091\u0003R$\u0010\u00f2\u0001\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$8\u0006¢\u0006\u0010\n\u0006\b\u00f2\u0001\u0010\u00d1\u0002\u001a\u0006\b\u0092\u0003\u0010\u00d3\u0002R\u001e\u0010\u00f3\u0001\u001a\u0004\u0018\u00010b8\u0006¢\u0006\u0010\n\u0006\b\u00f3\u0001\u0010\u0093\u0003\u001a\u0006\b\u0094\u0003\u0010\u0095\u0003R\u001e\u0010\u00f4\u0001\u001a\u00020\u00068\u0016X\u0096\u0004¢\u0006\u000f\n\u0006\b\u00f4\u0001\u0010\u00d8\u0002\u001a\u0005\b\u0096\u0003\u0010qR\u001e\u0010\u00f5\u0001\u001a\u00020\u00068\u0016X\u0096\u0004¢\u0006\u000f\n\u0006\b\u00f5\u0001\u0010\u00d8\u0002\u001a\u0005\b\u00f5\u0001\u0010qR\u001d\u0010\u00f6\u0001\u001a\u0004\u0018\u00010\u00068\u0006¢\u0006\u000f\n\u0006\b\u00f6\u0001\u0010\u00c0\u0002\u001a\u0005\b\u00f6\u0001\u0010\u0015R\u001e\u0010\u00f7\u0001\u001a\u0004\u0018\u00010g8\u0006¢\u0006\u0010\n\u0006\b\u00f7\u0001\u0010\u0097\u0003\u001a\u0006\b\u0098\u0003\u0010\u0099\u0003R$\u0010\u00f8\u0001\u001a\n\u0012\u0004\u0012\u00020i\u0018\u00010$8\u0006¢\u0006\u0010\n\u0006\b\u00f8\u0001\u0010\u00d1\u0002\u001a\u0006\b\u009a\u0003\u0010\u00d3\u0002R\u001e\u0010\u00f9\u0001\u001a\u0004\u0018\u00010k8\u0006¢\u0006\u0010\n\u0006\b\u00f9\u0001\u0010\u009b\u0003\u001a\u0006\b\u009c\u0003\u0010\u009d\u0003R\u001e\u0010\u00fa\u0001\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u00fa\u0001\u0010²\u0002\u001a\u0006\b\u009e\u0003\u0010´\u0002R$\u0010\u00fb\u0001\u001a\n\u0012\u0004\u0012\u00020n\u0018\u00010$8\u0006¢\u0006\u0010\n\u0006\b\u00fb\u0001\u0010\u00d1\u0002\u001a\u0006\b\u009f\u0003\u0010\u00d3\u0002R\u001e\u0010\u00fc\u0001\u001a\u00020\u00068\u0000X\u0080\u0004¢\u0006\u000f\n\u0006\b\u00fc\u0001\u0010\u00d8\u0002\u001a\u0005\b \u0003\u0010qR\u001e\u0010\u00fd\u0001\u001a\u0004\u0018\u00010s8\u0006¢\u0006\u0010\n\u0006\b\u00fd\u0001\u0010¡\u0003\u001a\u0006\b¢\u0003\u0010£\u0003R*\u0010\u00fe\u0001\u001a\u0010\u0012\u0004\u0012\u00020\b\u0012\u0004\u0012\u00020v\u0018\u00010u8\u0006¢\u0006\u0010\n\u0006\b\u00fe\u0001\u0010¤\u0003\u001a\u0006\b¥\u0003\u0010¦\u0003R\u001e\u0010\u00ff\u0001\u001a\u0004\u0018\u00010x8\u0006¢\u0006\u0010\n\u0006\b\u00ff\u0001\u0010§\u0003\u001a\u0006\b¨\u0003\u0010©\u0003R\u001e\u0010\u0080\u0002\u001a\u0004\u0018\u00010z8\u0006¢\u0006\u0010\n\u0006\b\u0080\u0002\u0010ª\u0003\u001a\u0006\b«\u0003\u0010¬\u0003R\u001e\u0010\u0081\u0002\u001a\u0004\u0018\u00010|8\u0006¢\u0006\u0010\n\u0006\b\u0081\u0002\u0010\u00ad\u0003\u001a\u0006\b®\u0003\u0010¯\u0003R\u001e\u0010\u0082\u0002\u001a\u0004\u0018\u00010~8\u0006¢\u0006\u0010\n\u0006\b\u0082\u0002\u0010°\u0003\u001a\u0006\b±\u0003\u0010²\u0003R\u001f\u0010\u0083\u0002\u001a\u0005\u0018\u00010\u0080\u00018\u0006¢\u0006\u0010\n\u0006\b\u0083\u0002\u0010³\u0003\u001a\u0006\b´\u0003\u0010µ\u0003R\u001f\u0010\u0084\u0002\u001a\u0005\u0018\u00010\u0082\u00018\u0006¢\u0006\u0010\n\u0006\b\u0084\u0002\u0010¶\u0003\u001a\u0006\b·\u0003\u0010¸\u0003R\u001f\u0010\u0085\u0002\u001a\u0005\u0018\u00010\u0084\u00018\u0006¢\u0006\u0010\n\u0006\b\u0085\u0002\u0010¹\u0003\u001a\u0006\bº\u0003\u0010»\u0003R#\u0010\u0086\u0002\u001a\t\u0012\u0005\u0012\u00030\u0086\u00010$8\u0006¢\u0006\u0010\n\u0006\b\u0086\u0002\u0010\u00d1\u0002\u001a\u0006\b¼\u0003\u0010\u00d3\u0002R\u001b\u0010\u0087\u0002\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u0087\u0002\u0010\u00d8\u0002\u001a\u0005\b\u0087\u0002\u0010qR\u001b\u0010\u0088\u0002\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u0088\u0002\u0010\u00d8\u0002\u001a\u0005\b\u0088\u0002\u0010qR\u001e\u0010\u0089\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u0089\u0002\u0010²\u0002\u001a\u0006\b½\u0003\u0010´\u0002R\u001e\u0010\u008a\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u008a\u0002\u0010²\u0002\u001a\u0006\b¾\u0003\u0010´\u0002R\u001e\u0010\u008b\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u008b\u0002\u0010²\u0002\u001a\u0006\b¿\u0003\u0010´\u0002R\u001e\u0010\u008c\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u008c\u0002\u0010²\u0002\u001a\u0006\b\u00c0\u0003\u0010´\u0002R\u001d\u0010\u008d\u0002\u001a\u0004\u0018\u00010\u00068\u0006¢\u0006\u000f\n\u0006\b\u008d\u0002\u0010\u00c0\u0002\u001a\u0005\b\u00c1\u0003\u0010\u0015R\u001d\u0010\u008e\u0002\u001a\u0004\u0018\u00010\u00068\u0006¢\u0006\u000f\n\u0006\b\u008e\u0002\u0010\u00c0\u0002\u001a\u0005\b\u00c2\u0003\u0010\u0015R\u001e\u0010\u008f\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u008f\u0002\u0010²\u0002\u001a\u0006\b\u00c3\u0003\u0010´\u0002R\u001b\u0010\u0090\u0002\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u0090\u0002\u0010\u00d8\u0002\u001a\u0005\b\u00c4\u0003\u0010qR\u001d\u0010\u0091\u0002\u001a\u0004\u0018\u00010\u000b8\u0006¢\u0006\u000f\n\u0006\b\u0091\u0002\u0010\u00c8\u0002\u001a\u0005\b\u00c5\u0003\u0010\u001cR\u001d\u0010\u0092\u0002\u001a\u0004\u0018\u00010\u000b8\u0006¢\u0006\u000f\n\u0006\b\u0092\u0002\u0010\u00c8\u0002\u001a\u0005\b\u00c6\u0003\u0010\u001cR\u001b\u0010\u0093\u0002\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u0093\u0002\u0010\u00d8\u0002\u001a\u0005\b\u0093\u0002\u0010qR\u001f\u0010\u0094\u0002\u001a\u0005\u0018\u00010\u0095\u00018\u0006¢\u0006\u0010\n\u0006\b\u0094\u0002\u0010\u00c7\u0003\u001a\u0006\b\u00c8\u0003\u0010\u00c9\u0003R\u001d\u0010\u0095\u0002\u001a\u0004\u0018\u00010\u00068\u0006¢\u0006\u000f\n\u0006\b\u0095\u0002\u0010\u00c0\u0002\u001a\u0005\b\u0095\u0002\u0010\u0015R\u001e\u0010\u0096\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u0096\u0002\u0010²\u0002\u001a\u0006\b\u00ca\u0003\u0010´\u0002R\u001d\u0010\u0097\u0002\u001a\u0004\u0018\u00010\u00118\u0006¢\u0006\u000f\n\u0006\b\u0097\u0002\u0010\u0086\u0003\u001a\u0005\b\u00cb\u0003\u0010WR\u001f\u0010\u0098\u0002\u001a\u0005\u0018\u00010\u009a\u00018\u0006¢\u0006\u0010\n\u0006\b\u0098\u0002\u0010\u00cc\u0003\u001a\u0006\b\u00cd\u0003\u0010\u00ce\u0003R\u001d\u0010\u0099\u0002\u001a\u0004\u0018\u00010\u00068\u0006¢\u0006\u000f\n\u0006\b\u0099\u0002\u0010\u00c0\u0002\u001a\u0005\b\u0099\u0002\u0010\u0015R\u001e\u0010\u009a\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u009a\u0002\u0010²\u0002\u001a\u0006\b\u00cf\u0003\u0010´\u0002R\u001b\u0010\u009b\u0002\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b\u009b\u0002\u0010\u00d8\u0002\u001a\u0005\b\u009b\u0002\u0010qR\u001e\u0010\u009c\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u009c\u0002\u0010²\u0002\u001a\u0006\b\u00d0\u0003\u0010´\u0002R\u001e\u0010\u009d\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b\u009d\u0002\u0010²\u0002\u001a\u0006\b\u00d1\u0003\u0010´\u0002R$\u0010\u009e\u0002\u001a\n\u0012\u0004\u0012\u00020\u0000\u0018\u00010$8\u0006¢\u0006\u0010\n\u0006\b\u009e\u0002\u0010\u00d1\u0002\u001a\u0006\b\u00d2\u0003\u0010\u00d3\u0002R\u001d\u0010\u009f\u0002\u001a\u0004\u0018\u00010\u00118\u0006¢\u0006\u000f\n\u0006\b\u009f\u0002\u0010\u0086\u0003\u001a\u0005\b\u00d3\u0003\u0010WR\u001e\u0010 \u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b \u0002\u0010²\u0002\u001a\u0006\b\u00d4\u0003\u0010´\u0002R%\u0010¡\u0002\u001a\u000b\u0012\u0005\u0012\u00030¤\u0001\u0018\u00010$8\u0006¢\u0006\u0010\n\u0006\b¡\u0002\u0010\u00d1\u0002\u001a\u0006\b\u00d5\u0003\u0010\u00d3\u0002R\u001e\u0010¢\u0002\u001a\u0004\u0018\u00010\b8\u0006¢\u0006\u0010\n\u0006\b¢\u0002\u0010²\u0002\u001a\u0006\b\u00d6\u0003\u0010´\u0002R\u001f\u0010£\u0002\u001a\u0005\u0018\u00010§\u00018\u0006¢\u0006\u0010\n\u0006\b£\u0002\u0010\u00d7\u0003\u001a\u0006\b\u00d8\u0003\u0010\u00d9\u0003R\u001b\u0010¤\u0002\u001a\u00020\u00068\u0006¢\u0006\u000f\n\u0006\b¤\u0002\u0010\u00d8\u0002\u001a\u0005\b¤\u0002\u0010qR'\u0010\u00da\u0003\u001a\u00020\b8\u0016X\u0096\u0004¢\u0006\u0018\n\u0006\b\u00da\u0003\u0010²\u0002\u0012\u0006\b\u00dc\u0003\u0010\u00dd\u0003\u001a\u0006\b\u00db\u0003\u0010´\u0002R)\u0010\u00de\u0003\u001a\u0004\u0018\u00010\b8\u0016X\u0096\u0004¢\u0006\u0018\n\u0006\b\u00de\u0003\u0010²\u0002\u0012\u0006\b\u00e0\u0003\u0010\u00dd\u0003\u001a\u0006\b\u00df\u0003\u0010´\u0002R\u001f\u0010\u00e3\u0003\u001a\u00020\b8VX\u0096\u0004¢\u0006\u0010\u0012\u0006\b\u00e2\u0003\u0010\u00dd\u0003\u001a\u0006\b\u00e1\u0003\u0010´\u0002R\u001d\u0010\u00e8\u0003\u001a\u00030\u00e4\u00038F¢\u0006\u0010\u0012\u0006\b\u00e7\u0003\u0010\u00dd\u0003\u001a\u0006\b\u00e5\u0003\u0010\u00e6\u0003¨\u0006\u00ec\u0003" }, d2 = { "Lcom/reddit/domain/model/Link;", "Lcom/reddit/domain/model/ILink;", "Landroid/os/Parcelable;", "Lcom/reddit/domain/model/AnalyticableLink;", "Lcom/reddit/domain/model/telemetry/EventCorrelatable;", "Law/b;", "", "shouldAllowCrossposts", "", "component1", "component2", "", "component3", "component4", "component5", "component6", "component7", "", "component8", "Lcom/reddit/domain/model/Nullean;", "component9", "()Ljava/lang/Boolean;", "component10", "", "component11", "component12", "component13", "component14", "()Ljava/lang/Long;", "component15", "component16", "component17", "component18", "component19", "component20", "component21", "", "Lcom/reddit/domain/model/FlairRichTextItem;", "component22", "component23", "component24", "component25", "component26", "component27", "Lcom/reddit/domain/awards/model/Award;", "component28", "Lcom/reddit/domain/awardsleaderboard/AwardLeaderboardStatus;", "component29", "component30", "component31", "component32", "component33", "component34", "component35", "component36", "Lcom/reddit/domain/model/Preview;", "component37", "component38", "Lcom/reddit/domain/model/LinkMedia;", "component39", "component40", "component41", "component42", "component43", "component44", "component45", "component46", "component47", "component48", "component49", "component50", "component51", "component52", "component53", "component54", "component55", "component56", "component57", "component58", "component59", "component60", "component61", "component62", "component63", "Lcom/reddit/domain/model/mod/BannedBy;", "component64", "component65", "()Ljava/lang/Integer;", "component66", "component67", "component68", "component69", "component70", "Lcom/reddit/domain/modtools/ModQueueTriggers;", "component71", "Lcom/reddit/mod/notes/domain/model/NoteLabel;", "component72", "component73", "Lcom/reddit/domain/model/SubredditDetail;", "component74", "component75", "component76", "component77", "Lcom/reddit/ads/domain/PromoLayoutType;", "component78", "Lcom/reddit/ads/link/models/AdEvent;", "component79", "Lcom/reddit/domain/model/OutboundLink;", "component80", "component81", "Lcom/reddit/domain/model/LinkCategory;", "component82", "component83$model_release", "()Z", "component83", "Lcom/reddit/domain/model/RichTextResponse;", "component84", "", "Lcom/reddit/domain/model/MediaMetaData;", "component85", "Lcom/reddit/domain/model/PostPoll;", "component86", "Lcom/reddit/domain/model/predictions/PostPredictionsTournamentData;", "component87", "Lcom/reddit/domain/model/RpanVideo;", "component88", "Lcom/reddit/domain/model/liveaudio/AudioRoom;", "component89", "Lcom/reddit/domain/model/liveaudio/LegacyAudioRoom;", "component90", "Lcom/reddit/domain/model/PostGallery;", "component91", "Lcom/reddit/domain/model/listing/RecommendationContext;", "component92", "Lcom/reddit/domain/model/tagging/CrowdsourceTaggingQuestion;", "component93", "component94", "component95", "component96", "component97", "component98", "component99", "component100", "component101", "component102", "component103", "component104", "component105", "component106", "Lcom/reddit/domain/model/DiscussionType;", "component107", "component108", "component109", "component110", "Lcom/reddit/ads/link/models/AppStoreData;", "component111", "component112", "component113", "component114", "component115", "component116", "component117", "component118", "component119", "Lcom/reddit/domain/model/Comment;", "component120", "component121", "Lcom/reddit/domain/model/mod/CrowdControlFilterLevel;", "component122", "component123", "id", "kindWithId", "createdUtc", "title", "typename", "domain", "url", "score", "voteState", "upvoteCount", "upvoteRatio", "downvoteCount", "numComments", "viewCount", "subreddit", "subredditId", "subredditNamePrefixed", "linkFlairText", "linkFlairId", "linkFlairTextColor", "linkFlairBackgroundColor", "linkFlairRichTextObject", "authorFlairRichTextObject", "author", "authorIconUrl", "authorSnoovatarUrl", "authorCakeday", "awards", "awardLeaderboardStatus", "over18", "spoiler", "suggestedSort", "showMedia", "adsShowMedia", "thumbnail", "body", "preview", "blurredImagePreview", "media", "selftext", "selftextHtml", "permalink", "isSelf", "postHint", "authorFlairText", "websocketUrl", "archived", "locked", "quarantine", "hidden", "subscribed", "saved", "ignoreReports", "hideScore", "stickied", "pinned", "canGild", "canMod", "distinguished", "approvedBy", "approved", "removed", "spam", "bannedBy", "numReports", "brandSafe", "isVideo", "locationName", "modReports", "userReports", "modQueueTriggers", "modNoteLabel", "crossPostParentList", "subredditDetail", "promoted", "isBlankAd", "isSurveyAd", "promoLayout", "events", "outboundLink", "callToAction", "linkCategories", "isCrosspostable", "rtjson", "mediaMetadata", "poll", "predictionsTournamentData", "rpanVideo", "audioRoom", "liveAudio", "gallery", "recommendationContext", "crowdsourceTaggingQuestions", "isRead", "isSubscribed", "authorFlairTemplateId", "authorFlairBackgroundColor", "authorFlairTextColor", "authorId", "authorIsNSFW", "authorIsBlocked", "unrepliableReason", "followed", "eventStartUtc", "eventEndUtc", "isLiveStream", "discussionType", "isPollIncluded", "adImpressionId", "galleryItemPosition", "appStoreData", "isCreatedFromAdsUi", "ctaMediaColor", "isReactAllowed", "reactedFromId", "reactedFromDisplayName", "postSets", "postSetShareLimit", "postSetId", "commentsGallery", "adSupplementaryTextRichtext", "crowdControlFilterLevel", "isCrowdControlFilterEnabled", "copy", "(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Boolean;IDIJLjava/lang/Long;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/util/List;Lcom/reddit/domain/awardsleaderboard/AwardLeaderboardStatus;ZZLjava/lang/String;ZZLjava/lang/String;Ljava/lang/String;Lcom/reddit/domain/model/Preview;Lcom/reddit/domain/model/Preview;Lcom/reddit/domain/model/LinkMedia;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZZZZZZZZZZLjava/lang/String;Ljava/lang/String;ZZZLcom/reddit/domain/model/mod/BannedBy;Ljava/lang/Integer;ZZLjava/lang/String;Ljava/util/List;Ljava/util/List;Lcom/reddit/domain/modtools/ModQueueTriggers;Lcom/reddit/mod/notes/domain/model/NoteLabel;Ljava/util/List;Lcom/reddit/domain/model/SubredditDetail;ZZLjava/lang/Boolean;Lcom/reddit/ads/domain/PromoLayoutType;Ljava/util/List;Lcom/reddit/domain/model/OutboundLink;Ljava/lang/String;Ljava/util/List;ZLcom/reddit/domain/model/RichTextResponse;Ljava/util/Map;Lcom/reddit/domain/model/PostPoll;Lcom/reddit/domain/model/predictions/PostPredictionsTournamentData;Lcom/reddit/domain/model/RpanVideo;Lcom/reddit/domain/model/liveaudio/AudioRoom;Lcom/reddit/domain/model/liveaudio/LegacyAudioRoom;Lcom/reddit/domain/model/PostGallery;Lcom/reddit/domain/model/listing/RecommendationContext;Ljava/util/List;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/String;ZLjava/lang/Long;Ljava/lang/Long;ZLcom/reddit/domain/model/DiscussionType;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Integer;Lcom/reddit/ads/link/models/AppStoreData;Ljava/lang/Boolean;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Lcom/reddit/domain/model/mod/CrowdControlFilterLevel;Z)Lcom/reddit/domain/model/Link;", "toString", "hashCode", "", "other", "equals", "describeContents", "Landroid/os/Parcel;", "parcel", "flags", "Lpg2/j;", "writeToParcel", "Ljava/lang/String;", "getId", "()Ljava/lang/String;", "getKindWithId", "J", "getCreatedUtc", "()J", "getTitle", "getTypename", "getDomain", "getUrl", "I", "getScore", "()I", "Ljava/lang/Boolean;", "getVoteState", "getUpvoteCount", "D", "getUpvoteRatio", "()D", "getDownvoteCount", "getNumComments", "Ljava/lang/Long;", "getViewCount", "getSubreddit", "getSubredditId", "getSubredditNamePrefixed", "getLinkFlairText", "getLinkFlairId", "getLinkFlairTextColor", "getLinkFlairBackgroundColor", "Ljava/util/List;", "getLinkFlairRichTextObject", "()Ljava/util/List;", "getAuthorFlairRichTextObject", "getAuthor", "getAuthorIconUrl", "getAuthorSnoovatarUrl", "Z", "getAuthorCakeday", "getAwards", "Lcom/reddit/domain/awardsleaderboard/AwardLeaderboardStatus;", "getAwardLeaderboardStatus", "()Lcom/reddit/domain/awardsleaderboard/AwardLeaderboardStatus;", "getOver18", "getSpoiler", "getSuggestedSort", "getShowMedia", "getAdsShowMedia", "getThumbnail", "getBody", "Lcom/reddit/domain/model/Preview;", "getPreview", "()Lcom/reddit/domain/model/Preview;", "getBlurredImagePreview", "Lcom/reddit/domain/model/LinkMedia;", "getMedia", "()Lcom/reddit/domain/model/LinkMedia;", "getSelftext", "getSelftextHtml", "getPermalink", "getPostHint", "getAuthorFlairText", "getWebsocketUrl", "getArchived", "getLocked", "getQuarantine", "getHidden", "getSubscribed", "getSaved", "getIgnoreReports", "getHideScore", "getStickied", "getPinned", "getCanGild", "getCanMod", "getDistinguished", "getApprovedBy", "getApproved", "getRemoved", "getSpam", "Lcom/reddit/domain/model/mod/BannedBy;", "getBannedBy", "()Lcom/reddit/domain/model/mod/BannedBy;", "Ljava/lang/Integer;", "getNumReports", "getBrandSafe", "getLocationName", "getModReports", "getUserReports", "Lcom/reddit/domain/modtools/ModQueueTriggers;", "getModQueueTriggers", "()Lcom/reddit/domain/modtools/ModQueueTriggers;", "Lcom/reddit/mod/notes/domain/model/NoteLabel;", "getModNoteLabel", "()Lcom/reddit/mod/notes/domain/model/NoteLabel;", "getCrossPostParentList", "Lcom/reddit/domain/model/SubredditDetail;", "getSubredditDetail", "()Lcom/reddit/domain/model/SubredditDetail;", "getPromoted", "Lcom/reddit/ads/domain/PromoLayoutType;", "getPromoLayout", "()Lcom/reddit/ads/domain/PromoLayoutType;", "getEvents", "Lcom/reddit/domain/model/OutboundLink;", "getOutboundLink", "()Lcom/reddit/domain/model/OutboundLink;", "getCallToAction", "getLinkCategories", "isCrosspostable$model_release", "Lcom/reddit/domain/model/RichTextResponse;", "getRtjson", "()Lcom/reddit/domain/model/RichTextResponse;", "Ljava/util/Map;", "getMediaMetadata", "()Ljava/util/Map;", "Lcom/reddit/domain/model/PostPoll;", "getPoll", "()Lcom/reddit/domain/model/PostPoll;", "Lcom/reddit/domain/model/predictions/PostPredictionsTournamentData;", "getPredictionsTournamentData", "()Lcom/reddit/domain/model/predictions/PostPredictionsTournamentData;", "Lcom/reddit/domain/model/RpanVideo;", "getRpanVideo", "()Lcom/reddit/domain/model/RpanVideo;", "Lcom/reddit/domain/model/liveaudio/AudioRoom;", "getAudioRoom", "()Lcom/reddit/domain/model/liveaudio/AudioRoom;", "Lcom/reddit/domain/model/liveaudio/LegacyAudioRoom;", "getLiveAudio", "()Lcom/reddit/domain/model/liveaudio/LegacyAudioRoom;", "Lcom/reddit/domain/model/PostGallery;", "getGallery", "()Lcom/reddit/domain/model/PostGallery;", "Lcom/reddit/domain/model/listing/RecommendationContext;", "getRecommendationContext", "()Lcom/reddit/domain/model/listing/RecommendationContext;", "getCrowdsourceTaggingQuestions", "getAuthorFlairTemplateId", "getAuthorFlairBackgroundColor", "getAuthorFlairTextColor", "getAuthorId", "getAuthorIsNSFW", "getAuthorIsBlocked", "getUnrepliableReason", "getFollowed", "getEventStartUtc", "getEventEndUtc", "Lcom/reddit/domain/model/DiscussionType;", "getDiscussionType", "()Lcom/reddit/domain/model/DiscussionType;", "getAdImpressionId", "getGalleryItemPosition", "Lcom/reddit/ads/link/models/AppStoreData;", "getAppStoreData", "()Lcom/reddit/ads/link/models/AppStoreData;", "getCtaMediaColor", "getReactedFromId", "getReactedFromDisplayName", "getPostSets", "getPostSetShareLimit", "getPostSetId", "getCommentsGallery", "getAdSupplementaryTextRichtext", "Lcom/reddit/domain/model/mod/CrowdControlFilterLevel;", "getCrowdControlFilterLevel", "()Lcom/reddit/domain/model/mod/CrowdControlFilterLevel;", "eventCorrelationId", "getEventCorrelationId", "getEventCorrelationId$annotations", "()V", "analyticsLinkType", "getAnalyticsLinkType", "getAnalyticsLinkType$annotations", "getUniqueId", "getUniqueId$annotations", "uniqueId", "Lcom/reddit/domain/model/vote/VoteDirection;", "getVoteDirection", "()Lcom/reddit/domain/model/vote/VoteDirection;", "getVoteDirection$annotations", "voteDirection", "<init>", "(Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Boolean;IDIJLjava/lang/Long;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/util/List;Lcom/reddit/domain/awardsleaderboard/AwardLeaderboardStatus;ZZLjava/lang/String;ZZLjava/lang/String;Ljava/lang/String;Lcom/reddit/domain/model/Preview;Lcom/reddit/domain/model/Preview;Lcom/reddit/domain/model/LinkMedia;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZZZZZZZZZZZLjava/lang/String;Ljava/lang/String;ZZZLcom/reddit/domain/model/mod/BannedBy;Ljava/lang/Integer;ZZLjava/lang/String;Ljava/util/List;Ljava/util/List;Lcom/reddit/domain/modtools/ModQueueTriggers;Lcom/reddit/mod/notes/domain/model/NoteLabel;Ljava/util/List;Lcom/reddit/domain/model/SubredditDetail;ZZLjava/lang/Boolean;Lcom/reddit/ads/domain/PromoLayoutType;Ljava/util/List;Lcom/reddit/domain/model/OutboundLink;Ljava/lang/String;Ljava/util/List;ZLcom/reddit/domain/model/RichTextResponse;Ljava/util/Map;Lcom/reddit/domain/model/PostPoll;Lcom/reddit/domain/model/predictions/PostPredictionsTournamentData;Lcom/reddit/domain/model/RpanVideo;Lcom/reddit/domain/model/liveaudio/AudioRoom;Lcom/reddit/domain/model/liveaudio/LegacyAudioRoom;Lcom/reddit/domain/model/PostGallery;Lcom/reddit/domain/model/listing/RecommendationContext;Ljava/util/List;ZZLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/String;ZLjava/lang/Long;Ljava/lang/Long;ZLcom/reddit/domain/model/DiscussionType;Ljava/lang/Boolean;Ljava/lang/String;Ljava/lang/Integer;Lcom/reddit/ads/link/models/AppStoreData;Ljava/lang/Boolean;Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Lcom/reddit/domain/model/mod/CrowdControlFilterLevel;Z)V", "Companion", "model_release" }, k = 1, mv = { 1, 7, 1 })
public final class Link extends ILink implements Parcelable, AnalyticableLink, EventCorrelatable, b
{
    public static final Parcelable$Creator<Link> CREATOR;
    public static final Companion Companion;
    public static final String DISTINGUISH_TYPE_MODERATOR = "moderator";
    private static final String REDDIT_DOMAIN = "reddit.com";
    private final String adImpressionId;
    private final String adSupplementaryTextRichtext;
    private final boolean adsShowMedia;
    private final String analyticsLinkType;
    private final AppStoreData appStoreData;
    private final boolean approved;
    private final String approvedBy;
    private final boolean archived;
    private final AudioRoom audioRoom;
    private final String author;
    private final boolean authorCakeday;
    private final String authorFlairBackgroundColor;
    private final List<FlairRichTextItem> authorFlairRichTextObject;
    private final String authorFlairTemplateId;
    private final String authorFlairText;
    private final String authorFlairTextColor;
    private final String authorIconUrl;
    private final String authorId;
    private final Boolean authorIsBlocked;
    private final Boolean authorIsNSFW;
    private final String authorSnoovatarUrl;
    private final AwardLeaderboardStatus awardLeaderboardStatus;
    private final List<Award> awards;
    private final BannedBy bannedBy;
    private final Preview blurredImagePreview;
    private final String body;
    private final boolean brandSafe;
    private final String callToAction;
    private final boolean canGild;
    private final boolean canMod;
    private final List<Comment> commentsGallery;
    private final long createdUtc;
    private final List<Link> crossPostParentList;
    private final CrowdControlFilterLevel crowdControlFilterLevel;
    private final transient List<CrowdsourceTaggingQuestion> crowdsourceTaggingQuestions;
    private final String ctaMediaColor;
    private final DiscussionType discussionType;
    private final String distinguished;
    private final String domain;
    private final int downvoteCount;
    private final String eventCorrelationId;
    private final Long eventEndUtc;
    private final Long eventStartUtc;
    private final List<AdEvent> events;
    private final boolean followed;
    private final PostGallery gallery;
    private final Integer galleryItemPosition;
    private final boolean hidden;
    private final boolean hideScore;
    private final String id;
    private final boolean ignoreReports;
    private final boolean isBlankAd;
    private final Boolean isCreatedFromAdsUi;
    private final boolean isCrosspostable;
    private final boolean isCrowdControlFilterEnabled;
    private final boolean isLiveStream;
    private final Boolean isPollIncluded;
    private final boolean isReactAllowed;
    private final boolean isRead;
    private final boolean isSelf;
    private final boolean isSubscribed;
    private final Boolean isSurveyAd;
    private final boolean isVideo;
    private final String kindWithId;
    private final List<LinkCategory> linkCategories;
    private final String linkFlairBackgroundColor;
    private final String linkFlairId;
    private final List<FlairRichTextItem> linkFlairRichTextObject;
    private final String linkFlairText;
    private final String linkFlairTextColor;
    private final LegacyAudioRoom liveAudio;
    private final String locationName;
    private final boolean locked;
    private final LinkMedia media;
    private final Map<String, MediaMetaData> mediaMetadata;
    private final NoteLabel modNoteLabel;
    private final transient ModQueueTriggers modQueueTriggers;
    private final List<List<String>> modReports;
    private final long numComments;
    private final Integer numReports;
    private final OutboundLink outboundLink;
    private final boolean over18;
    private final String permalink;
    private final boolean pinned;
    private final PostPoll poll;
    private final String postHint;
    private final String postSetId;
    private final Integer postSetShareLimit;
    private final List<Link> postSets;
    private final PostPredictionsTournamentData predictionsTournamentData;
    private final Preview preview;
    private final PromoLayoutType promoLayout;
    private final boolean promoted;
    private final boolean quarantine;
    private final String reactedFromDisplayName;
    private final String reactedFromId;
    private final RecommendationContext recommendationContext;
    private final boolean removed;
    private final RpanVideo rpanVideo;
    private final RichTextResponse rtjson;
    private final boolean saved;
    private final int score;
    private final String selftext;
    private final String selftextHtml;
    private final boolean showMedia;
    private final boolean spam;
    private final boolean spoiler;
    private final boolean stickied;
    private final String subreddit;
    private final SubredditDetail subredditDetail;
    private final String subredditId;
    private final String subredditNamePrefixed;
    private final boolean subscribed;
    private final String suggestedSort;
    private final String thumbnail;
    private final String title;
    private final String typename;
    private final String unrepliableReason;
    private final int upvoteCount;
    private final double upvoteRatio;
    private final String url;
    private final List<List<String>> userReports;
    private final Long viewCount;
    private final Boolean voteState;
    private final String websocketUrl;
    
    static {
        Companion = new Companion(null);
        CREATOR = (Parcelable$Creator)new Creator();
    }
    
    public Link() {
        this(null, null, 0L, null, null, null, null, 0, null, 0, 0.0, 0, 0L, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null, null, false, false, null, false, false, null, null, null, null, null, null, null, null, false, null, null, null, false, false, false, false, false, false, false, false, false, false, false, false, null, null, false, false, false, null, null, false, false, null, null, null, null, null, null, null, false, false, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, null, null, false, false, null, null, null, null, null, null, null, false, null, null, false, null, null, null, null, null, null, null, false, null, null, null, null, null, null, null, null, false, -1, -1, -1, 134217727, null);
    }
    
    public Link(final String id, @n(name = "name") final String kindWithId, @n(name = "created_utc") final long createdUtc, final String title, @n(name = "typename") final String typename, final String domain, final String url, final int score, @n(name = "likes") final Boolean voteState, @n(name = "ups") final int upvoteCount, final double upvoteRatio, @n(name = "downs") final int downvoteCount, @n(name = "num_comments") final long numComments, @n(name = "view_count") final Long viewCount, final String subreddit, @n(name = "subreddit_id") final String subredditId, @n(name = "subreddit_name_prefixed") final String subredditNamePrefixed, @n(name = "link_flair_text") final String linkFlairText, @n(name = "link_flair_template_id") final String linkFlairId, @n(name = "link_flair_text_color") final String linkFlairTextColor, @n(name = "link_flair_background_color") final String linkFlairBackgroundColor, @n(name = "link_flair_richtext") final List<FlairRichTextItem> linkFlairRichTextObject, @n(name = "author_flair_richtext") final List<FlairRichTextItem> authorFlairRichTextObject, final String author, @n(name = "author_icon_url") final String authorIconUrl, @n(name = "snoovatar_img") final String authorSnoovatarUrl, @n(name = "author_cakeday") final boolean authorCakeday, @n(name = "all_awardings") final List<Award> awards, @n(name = "top_awarded_type") final AwardLeaderboardStatus awardLeaderboardStatus, @n(name = "over_18") final boolean over18, final boolean spoiler, @n(name = "suggested_sort") final String suggestedSort, @n(name = "show_media") final boolean showMedia, @n(name = "ads_show_media") final boolean adsShowMedia, final String thumbnail, final String body, final Preview preview, final Preview blurredImagePreview, final LinkMedia media, final String selftext, @n(name = "selftext_html") final String selftextHtml, final String permalink, @n(name = "is_self") final boolean isSelf, @n(name = "post_hint") final String postHint, @n(name = "author_flair_text") final String authorFlairText, @n(name = "websocket_url") final String websocketUrl, final boolean archived, final boolean locked, final boolean quarantine, final boolean hidden, final boolean subscribed, final boolean saved, @n(name = "ignore_reports") final boolean ignoreReports, @n(name = "hide_score") final boolean hideScore, final boolean stickied, final boolean pinned, @n(name = "can_gild") final boolean canGild, @n(name = "can_mod_post") final boolean canMod, final String distinguished, @n(name = "approved_by") final String approvedBy, final boolean approved, final boolean removed, final boolean spam, @n(name = "banned_by") final BannedBy bannedBy, @n(name = "num_reports") final Integer numReports, @n(name = "brand_safe") final boolean brandSafe, @n(name = "is_video") final boolean isVideo, @n(name = "location_name") final String locationName, @n(name = "mod_reports") final List<? extends List<String>> modReports, @n(name = "user_reports") final List<? extends List<String>> userReports, final ModQueueTriggers modQueueTriggers, final NoteLabel modNoteLabel, @n(name = "crosspost_parent_list") final List<Link> crossPostParentList, @n(name = "sr_detail") final SubredditDetail subredditDetail, @n(name = "promoted") final boolean promoted, @n(name = "is_blank") final boolean isBlankAd, @n(name = "is_survey_ad") final Boolean isSurveyAd, @n(name = "promo_layout") final PromoLayoutType promoLayout, @n(name = "events") final List<AdEvent> events, @n(name = "outbound_link") final OutboundLink outboundLink, @n(name = "call_to_action") final String callToAction, @n(name = "post_categories") final List<LinkCategory> linkCategories, @n(name = "is_crosspostable") final boolean isCrosspostable, final RichTextResponse rtjson, @n(name = "media_metadata") final Map<String, MediaMetaData> mediaMetadata, @n(name = "poll_data") final PostPoll poll, @n(name = "tournament_data") final PostPredictionsTournamentData predictionsTournamentData, @n(name = "rpan_video") final RpanVideo rpanVideo, @n(name = "audio_room") final AudioRoom audioRoom, @n(name = "live_audio") final LegacyAudioRoom liveAudio, @n(name = "gallery_data") final PostGallery gallery, @n(name = "recommendation_context") final RecommendationContext recommendationContext, final List<CrowdsourceTaggingQuestion> crowdsourceTaggingQuestions, final boolean isRead, final boolean isSubscribed, @n(name = "author_flair_template_id") final String authorFlairTemplateId, @n(name = "author_flair_background_color") final String authorFlairBackgroundColor, @n(name = "author_flair_text_color") final String authorFlairTextColor, @n(name = "author_fullname") final String authorId, @n(name = "author_is_nsfw") final Boolean authorIsNSFW, @n(name = "author_is_blocked") final Boolean authorIsBlocked, @n(name = "unrepliable_reason") final String unrepliableReason, @n(name = "is_followed") final boolean followed, @n(name = "event_start") final Long eventStartUtc, @n(name = "event_end") final Long eventEndUtc, @n(name = "is_live_stream") final boolean isLiveStream, @n(name = "discussion_type") final DiscussionType discussionType, @n(name = "is_meta") final Boolean isPollIncluded, @n(name = "impression_id_str") final String adImpressionId, @n(name = "gallery_item_position") final Integer galleryItemPosition, @n(name = "app_store_data") final AppStoreData appStoreData, @n(name = "is_created_from_ads_ui") final Boolean isCreatedFromAdsUi, @n(name = "cta_media_color") final String ctaMediaColor, @n(name = "is_react_allowed") final boolean isReactAllowed, @n(name = "reacted_from_id") final String reactedFromId, @n(name = "reacted_from_display_name") final String reactedFromDisplayName, @n(name = "post_set_posts") final List<Link> postSets, @n(name = "post_set_share_limit") final Integer postSetShareLimit, final String postSetId, final List<Comment> commentsGallery, @n(name = "ad_supplementary_text_rt") final String adSupplementaryTextRichtext, final CrowdControlFilterLevel crowdControlFilterLevel, final boolean isCrowdControlFilterEnabled) {
        f.f((Object)id, "id");
        f.f((Object)kindWithId, "kindWithId");
        f.f((Object)title, "title");
        f.f((Object)domain, "domain");
        f.f((Object)url, "url");
        f.f((Object)subreddit, "subreddit");
        f.f((Object)subredditId, "subredditId");
        f.f((Object)subredditNamePrefixed, "subredditNamePrefixed");
        f.f((Object)author, "author");
        f.f((Object)awards, "awards");
        f.f((Object)selftext, "selftext");
        f.f((Object)permalink, "permalink");
        f.f((Object)modReports, "modReports");
        f.f((Object)userReports, "userReports");
        f.f((Object)crowdsourceTaggingQuestions, "crowdsourceTaggingQuestions");
        super((DefaultConstructorMarker)null);
        this.id = id;
        this.kindWithId = kindWithId;
        this.createdUtc = createdUtc;
        this.title = title;
        this.typename = typename;
        this.domain = domain;
        this.url = url;
        this.score = score;
        this.voteState = voteState;
        this.upvoteCount = upvoteCount;
        this.upvoteRatio = upvoteRatio;
        this.downvoteCount = downvoteCount;
        this.numComments = numComments;
        this.viewCount = viewCount;
        this.subreddit = subreddit;
        this.subredditId = subredditId;
        this.subredditNamePrefixed = subredditNamePrefixed;
        this.linkFlairText = linkFlairText;
        this.linkFlairId = linkFlairId;
        this.linkFlairTextColor = linkFlairTextColor;
        this.linkFlairBackgroundColor = linkFlairBackgroundColor;
        this.linkFlairRichTextObject = linkFlairRichTextObject;
        this.authorFlairRichTextObject = authorFlairRichTextObject;
        this.author = author;
        this.authorIconUrl = authorIconUrl;
        this.authorSnoovatarUrl = authorSnoovatarUrl;
        this.authorCakeday = authorCakeday;
        this.awards = awards;
        this.awardLeaderboardStatus = awardLeaderboardStatus;
        this.over18 = over18;
        this.spoiler = spoiler;
        this.suggestedSort = suggestedSort;
        this.showMedia = showMedia;
        this.adsShowMedia = adsShowMedia;
        this.thumbnail = thumbnail;
        this.body = body;
        this.preview = preview;
        this.blurredImagePreview = blurredImagePreview;
        this.media = media;
        this.selftext = selftext;
        this.selftextHtml = selftextHtml;
        this.permalink = permalink;
        this.isSelf = isSelf;
        this.postHint = postHint;
        this.authorFlairText = authorFlairText;
        this.websocketUrl = websocketUrl;
        this.archived = archived;
        this.locked = locked;
        this.quarantine = quarantine;
        this.hidden = hidden;
        this.subscribed = subscribed;
        this.saved = saved;
        this.ignoreReports = ignoreReports;
        this.hideScore = hideScore;
        this.stickied = stickied;
        this.pinned = pinned;
        this.canGild = canGild;
        this.canMod = canMod;
        this.distinguished = distinguished;
        this.approvedBy = approvedBy;
        this.approved = approved;
        this.removed = removed;
        this.spam = spam;
        this.bannedBy = bannedBy;
        this.numReports = numReports;
        this.brandSafe = brandSafe;
        this.isVideo = isVideo;
        this.locationName = locationName;
        this.modReports = (List<List<String>>)modReports;
        this.userReports = (List<List<String>>)userReports;
        this.modQueueTriggers = modQueueTriggers;
        this.modNoteLabel = modNoteLabel;
        this.crossPostParentList = crossPostParentList;
        this.subredditDetail = subredditDetail;
        this.promoted = promoted;
        this.isBlankAd = isBlankAd;
        this.isSurveyAd = isSurveyAd;
        this.promoLayout = promoLayout;
        this.events = events;
        this.outboundLink = outboundLink;
        this.callToAction = callToAction;
        this.linkCategories = linkCategories;
        this.isCrosspostable = isCrosspostable;
        this.rtjson = rtjson;
        this.mediaMetadata = mediaMetadata;
        this.poll = poll;
        this.predictionsTournamentData = predictionsTournamentData;
        this.rpanVideo = rpanVideo;
        this.audioRoom = audioRoom;
        this.liveAudio = liveAudio;
        this.gallery = gallery;
        this.recommendationContext = recommendationContext;
        this.crowdsourceTaggingQuestions = crowdsourceTaggingQuestions;
        this.isRead = isRead;
        this.isSubscribed = isSubscribed;
        this.authorFlairTemplateId = authorFlairTemplateId;
        this.authorFlairBackgroundColor = authorFlairBackgroundColor;
        this.authorFlairTextColor = authorFlairTextColor;
        this.authorId = authorId;
        this.authorIsNSFW = authorIsNSFW;
        this.authorIsBlocked = authorIsBlocked;
        this.unrepliableReason = unrepliableReason;
        this.followed = followed;
        this.eventStartUtc = eventStartUtc;
        this.eventEndUtc = eventEndUtc;
        this.isLiveStream = isLiveStream;
        this.discussionType = discussionType;
        this.isPollIncluded = isPollIncluded;
        this.adImpressionId = adImpressionId;
        this.galleryItemPosition = galleryItemPosition;
        this.appStoreData = appStoreData;
        this.isCreatedFromAdsUi = isCreatedFromAdsUi;
        this.ctaMediaColor = ctaMediaColor;
        this.isReactAllowed = isReactAllowed;
        this.reactedFromId = reactedFromId;
        this.reactedFromDisplayName = reactedFromDisplayName;
        this.postSets = postSets;
        this.postSetShareLimit = postSetShareLimit;
        this.postSetId = postSetId;
        this.commentsGallery = commentsGallery;
        this.adSupplementaryTextRichtext = adSupplementaryTextRichtext;
        this.crowdControlFilterLevel = crowdControlFilterLevel;
        this.isCrowdControlFilterEnabled = isCrowdControlFilterEnabled;
        this.eventCorrelationId = a2.b.g("randomUUID().toString()");
    }
    
    public Link(String s, String s2, long n, String s3, String s4, String s5, String s6, int n2, Boolean b, int n3, double n4, int n5, long n6, Long value, String s7, String s8, String s9, String s10, String s11, String s12, String s13, List list, List list2, String s14, String s15, String s16, boolean b2, List instance, AwardLeaderboardStatus awardLeaderboardStatus, boolean b3, boolean b4, String s17, boolean b5, boolean b6, String s18, String s19, Preview preview, Preview preview2, LinkMedia linkMedia, String s20, String s21, String s22, boolean b7, String s23, String s24, String s25, boolean b8, boolean b9, boolean b10, boolean b11, boolean b12, boolean b13, boolean b14, boolean b15, boolean b16, boolean b17, boolean b18, boolean b19, String s26, String s27, boolean b20, boolean b21, boolean b22, BannedBy bannedBy, Integer n7, boolean b23, boolean b24, String s28, List instance2, List instance3, ModQueueTriggers modQueueTriggers, NoteLabel noteLabel, List list3, SubredditDetail subredditDetail, boolean b25, boolean b26, Boolean false, PromoLayoutType promoLayoutType, List list4, OutboundLink outboundLink, String s29, List list5, boolean b27, RichTextResponse richTextResponse, Map map, PostPoll postPoll, PostPredictionsTournamentData postPredictionsTournamentData, RpanVideo rpanVideo, AudioRoom audioRoom, LegacyAudioRoom legacyAudioRoom, PostGallery postGallery, RecommendationContext recommendationContext, List instance4, boolean b28, boolean b29, String s30, String s31, String s32, String s33, Boolean b30, Boolean b31, String s34, boolean b32, Long n8, Long n9, boolean b33, DiscussionType discussionType, Boolean b34, String s35, Integer n10, AppStoreData appStoreData, Boolean b35, String s36, boolean b36, String s37, String s38, List list6, Integer n11, String s39, List list7, String s40, CrowdControlFilterLevel crowdControlFilterLevel, boolean b37, final int n12, final int n13, final int n14, final int n15, final DefaultConstructorMarker defaultConstructorMarker) {
        if ((n12 & 0x1) != 0x0) {
            s = "";
        }
        if ((n12 & 0x2) != 0x0) {
            s2 = "";
        }
        if ((n12 & 0x4) != 0x0) {
            n = 0L;
        }
        if ((n12 & 0x8) != 0x0) {
            s3 = "";
        }
        if ((n12 & 0x10) != 0x0) {
            s4 = null;
        }
        if ((n12 & 0x20) != 0x0) {
            s5 = "";
        }
        if ((n12 & 0x40) != 0x0) {
            s6 = "";
        }
        if ((n12 & 0x80) != 0x0) {
            n2 = 0;
        }
        if ((n12 & 0x100) != 0x0) {
            b = null;
        }
        if ((n12 & 0x200) != 0x0) {
            n3 = 0;
        }
        if ((n12 & 0x400) != 0x0) {
            n4 = 0.0;
        }
        if ((n12 & 0x800) != 0x0) {
            n5 = 0;
        }
        if ((n12 & 0x1000) != 0x0) {
            n6 = 0L;
        }
        if ((n12 & 0x2000) != 0x0) {
            value = 0L;
        }
        if ((n12 & 0x4000) != 0x0) {
            s7 = "";
        }
        if ((n12 & 0x8000) != 0x0) {
            s8 = "";
        }
        if ((n12 & 0x10000) != 0x0) {
            s9 = "";
        }
        if ((n12 & 0x20000) != 0x0) {
            s10 = null;
        }
        if ((n12 & 0x40000) != 0x0) {
            s11 = null;
        }
        if ((n12 & 0x80000) != 0x0) {
            s12 = null;
        }
        if ((n12 & 0x100000) != 0x0) {
            s13 = null;
        }
        if ((n12 & 0x200000) != 0x0) {
            list = null;
        }
        if ((n12 & 0x400000) != 0x0) {
            list2 = null;
        }
        if ((n12 & 0x800000) != 0x0) {
            s14 = "";
        }
        if ((n12 & 0x1000000) != 0x0) {
            s15 = null;
        }
        if ((n12 & 0x2000000) != 0x0) {
            s16 = null;
        }
        if ((n12 & 0x4000000) != 0x0) {
            b2 = false;
        }
        if ((n12 & 0x8000000) != 0x0) {
            instance = EmptyList.INSTANCE;
        }
        if ((n12 & 0x10000000) != 0x0) {
            awardLeaderboardStatus = null;
        }
        if ((n12 & 0x20000000) != 0x0) {
            b3 = false;
        }
        if ((n12 & 0x40000000) != 0x0) {
            b4 = false;
        }
        if ((n12 & Integer.MIN_VALUE) != 0x0) {
            s17 = null;
        }
        if ((n13 & 0x1) != 0x0) {
            b5 = false;
        }
        if ((n13 & 0x2) != 0x0) {
            b6 = false;
        }
        if ((n13 & 0x4) != 0x0) {
            s18 = null;
        }
        if ((n13 & 0x8) != 0x0) {
            s19 = null;
        }
        if ((n13 & 0x10) != 0x0) {
            preview = null;
        }
        if ((n13 & 0x20) != 0x0) {
            preview2 = null;
        }
        if ((n13 & 0x40) != 0x0) {
            linkMedia = null;
        }
        if ((n13 & 0x80) != 0x0) {
            s20 = "";
        }
        if ((n13 & 0x100) != 0x0) {
            s21 = null;
        }
        if ((n13 & 0x200) != 0x0) {
            s22 = "";
        }
        if ((n13 & 0x400) != 0x0) {
            b7 = false;
        }
        if ((n13 & 0x800) != 0x0) {
            s23 = null;
        }
        if ((n13 & 0x1000) != 0x0) {
            s24 = null;
        }
        if ((n13 & 0x2000) != 0x0) {
            s25 = null;
        }
        if ((n13 & 0x4000) != 0x0) {
            b8 = false;
        }
        if ((n13 & 0x8000) != 0x0) {
            b9 = false;
        }
        if ((n13 & 0x10000) != 0x0) {
            b10 = false;
        }
        if ((n13 & 0x20000) != 0x0) {
            b11 = false;
        }
        if ((n13 & 0x40000) != 0x0) {
            b12 = false;
        }
        if ((n13 & 0x80000) != 0x0) {
            b13 = false;
        }
        if ((n13 & 0x100000) != 0x0) {
            b14 = false;
        }
        if ((n13 & 0x200000) != 0x0) {
            b15 = false;
        }
        if ((n13 & 0x400000) != 0x0) {
            b16 = false;
        }
        if ((n13 & 0x800000) != 0x0) {
            b17 = false;
        }
        if ((n13 & 0x1000000) != 0x0) {
            b18 = false;
        }
        if ((n13 & 0x2000000) != 0x0) {
            b19 = false;
        }
        if ((n13 & 0x4000000) != 0x0) {
            s26 = null;
        }
        if ((n13 & 0x8000000) != 0x0) {
            s27 = null;
        }
        if ((n13 & 0x10000000) != 0x0) {
            b20 = false;
        }
        if ((n13 & 0x20000000) != 0x0) {
            b21 = false;
        }
        if ((n13 & 0x40000000) != 0x0) {
            b22 = false;
        }
        if ((n13 & Integer.MIN_VALUE) != 0x0) {
            bannedBy = null;
        }
        if ((n14 & 0x1) != 0x0) {
            n7 = null;
        }
        if ((n14 & 0x2) != 0x0) {
            b23 = false;
        }
        if ((n14 & 0x4) != 0x0) {
            b24 = false;
        }
        if ((n14 & 0x8) != 0x0) {
            s28 = null;
        }
        if ((n14 & 0x10) != 0x0) {
            instance2 = EmptyList.INSTANCE;
        }
        if ((n14 & 0x20) != 0x0) {
            instance3 = EmptyList.INSTANCE;
        }
        if ((n14 & 0x40) != 0x0) {
            modQueueTriggers = null;
        }
        if ((n14 & 0x80) != 0x0) {
            noteLabel = null;
        }
        if ((n14 & 0x100) != 0x0) {
            list3 = null;
        }
        if ((n14 & 0x200) != 0x0) {
            subredditDetail = null;
        }
        if ((n14 & 0x400) != 0x0) {
            b25 = false;
        }
        if ((n14 & 0x800) != 0x0) {
            b26 = false;
        }
        if ((n14 & 0x1000) != 0x0) {
            false = Boolean.FALSE;
        }
        if ((n14 & 0x2000) != 0x0) {
            promoLayoutType = null;
        }
        if ((n14 & 0x4000) != 0x0) {
            list4 = null;
        }
        if ((n14 & 0x8000) != 0x0) {
            outboundLink = null;
        }
        if ((n14 & 0x10000) != 0x0) {
            s29 = null;
        }
        if ((n14 & 0x20000) != 0x0) {
            list5 = null;
        }
        if ((n14 & 0x40000) != 0x0) {
            b27 = false;
        }
        if ((n14 & 0x80000) != 0x0) {
            richTextResponse = null;
        }
        if ((n14 & 0x100000) != 0x0) {
            map = null;
        }
        if ((n14 & 0x200000) != 0x0) {
            postPoll = null;
        }
        if ((n14 & 0x400000) != 0x0) {
            postPredictionsTournamentData = null;
        }
        if ((n14 & 0x800000) != 0x0) {
            rpanVideo = null;
        }
        if ((n14 & 0x1000000) != 0x0) {
            audioRoom = null;
        }
        if ((n14 & 0x2000000) != 0x0) {
            legacyAudioRoom = null;
        }
        if ((n14 & 0x4000000) != 0x0) {
            postGallery = null;
        }
        if ((n14 & 0x8000000) != 0x0) {
            recommendationContext = null;
        }
        if ((n14 & 0x10000000) != 0x0) {
            instance4 = EmptyList.INSTANCE;
        }
        if ((n14 & 0x20000000) != 0x0) {
            b28 = false;
        }
        if ((n14 & 0x40000000) != 0x0) {
            b29 = false;
        }
        if ((n14 & Integer.MIN_VALUE) != 0x0) {
            s30 = null;
        }
        if ((n15 & 0x1) != 0x0) {
            s31 = null;
        }
        if ((n15 & 0x2) != 0x0) {
            s32 = null;
        }
        if ((n15 & 0x4) != 0x0) {
            s33 = null;
        }
        if ((n15 & 0x8) != 0x0) {
            b30 = null;
        }
        if ((n15 & 0x10) != 0x0) {
            b31 = null;
        }
        if ((n15 & 0x20) != 0x0) {
            s34 = null;
        }
        if ((n15 & 0x40) != 0x0) {
            b32 = false;
        }
        if ((n15 & 0x80) != 0x0) {
            n8 = null;
        }
        if ((n15 & 0x100) != 0x0) {
            n9 = null;
        }
        if ((n15 & 0x200) != 0x0) {
            b33 = false;
        }
        if ((n15 & 0x400) != 0x0) {
            discussionType = null;
        }
        if ((n15 & 0x800) != 0x0) {
            b34 = null;
        }
        if ((n15 & 0x1000) != 0x0) {
            s35 = null;
        }
        if ((n15 & 0x2000) != 0x0) {
            n10 = null;
        }
        if ((n15 & 0x4000) != 0x0) {
            appStoreData = null;
        }
        if ((n15 & 0x8000) != 0x0) {
            b35 = null;
        }
        if ((n15 & 0x10000) != 0x0) {
            s36 = null;
        }
        if ((n15 & 0x20000) != 0x0) {
            b36 = false;
        }
        if ((n15 & 0x40000) != 0x0) {
            s37 = null;
        }
        if ((n15 & 0x80000) != 0x0) {
            s38 = null;
        }
        if ((n15 & 0x100000) != 0x0) {
            list6 = null;
        }
        if ((n15 & 0x200000) != 0x0) {
            n11 = null;
        }
        if ((n15 & 0x400000) != 0x0) {
            s39 = null;
        }
        if ((n15 & 0x800000) != 0x0) {
            list7 = null;
        }
        if ((n15 & 0x1000000) != 0x0) {
            s40 = null;
        }
        if ((n15 & 0x2000000) != 0x0) {
            crowdControlFilterLevel = null;
        }
        if ((n15 & 0x4000000) != 0x0) {
            b37 = false;
        }
        this(s, s2, n, s3, s4, s5, s6, n2, b, n3, n4, n5, n6, value, s7, s8, s9, s10, s11, s12, s13, list, list2, s14, s15, s16, b2, (List<Award>)instance, awardLeaderboardStatus, b3, b4, s17, b5, b6, s18, s19, preview, preview2, linkMedia, s20, s21, s22, b7, s23, s24, s25, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, s26, s27, b20, b21, b22, bannedBy, n7, b23, b24, s28, (List<? extends List<String>>)instance2, (List<? extends List<String>>)instance3, modQueueTriggers, noteLabel, list3, subredditDetail, b25, b26, false, promoLayoutType, list4, outboundLink, s29, list5, b27, richTextResponse, map, postPoll, postPredictionsTournamentData, rpanVideo, audioRoom, legacyAudioRoom, postGallery, recommendationContext, (List<CrowdsourceTaggingQuestion>)instance4, b28, b29, s30, s31, s32, s33, b30, b31, s34, b32, n8, n9, b33, discussionType, b34, s35, n10, appStoreData, b35, s36, b36, s37, s38, list6, n11, s39, list7, s40, crowdControlFilterLevel, b37);
    }
    
    public final String component1() {
        return this.getId();
    }
    
    public final int component10() {
        return this.upvoteCount;
    }
    
    public final Boolean component100() {
        return this.authorIsNSFW;
    }
    
    public final Boolean component101() {
        return this.authorIsBlocked;
    }
    
    public final String component102() {
        return this.unrepliableReason;
    }
    
    public final boolean component103() {
        return this.followed;
    }
    
    public final Long component104() {
        return this.eventStartUtc;
    }
    
    public final Long component105() {
        return this.eventEndUtc;
    }
    
    public final boolean component106() {
        return this.isLiveStream;
    }
    
    public final DiscussionType component107() {
        return this.discussionType;
    }
    
    public final Boolean component108() {
        return this.isPollIncluded;
    }
    
    public final String component109() {
        return this.adImpressionId;
    }
    
    public final double component11() {
        return this.upvoteRatio;
    }
    
    public final Integer component110() {
        return this.galleryItemPosition;
    }
    
    public final AppStoreData component111() {
        return this.appStoreData;
    }
    
    public final Boolean component112() {
        return this.isCreatedFromAdsUi;
    }
    
    public final String component113() {
        return this.ctaMediaColor;
    }
    
    public final boolean component114() {
        return this.isReactAllowed;
    }
    
    public final String component115() {
        return this.reactedFromId;
    }
    
    public final String component116() {
        return this.reactedFromDisplayName;
    }
    
    public final List<Link> component117() {
        return this.postSets;
    }
    
    public final Integer component118() {
        return this.postSetShareLimit;
    }
    
    public final String component119() {
        return this.postSetId;
    }
    
    public final int component12() {
        return this.downvoteCount;
    }
    
    public final List<Comment> component120() {
        return this.commentsGallery;
    }
    
    public final String component121() {
        return this.adSupplementaryTextRichtext;
    }
    
    public final CrowdControlFilterLevel component122() {
        return this.crowdControlFilterLevel;
    }
    
    public final boolean component123() {
        return this.isCrowdControlFilterEnabled;
    }
    
    public final long component13() {
        return this.numComments;
    }
    
    public final Long component14() {
        return this.viewCount;
    }
    
    public final String component15() {
        return this.getSubreddit();
    }
    
    public final String component16() {
        return this.getSubredditId();
    }
    
    public final String component17() {
        return this.subredditNamePrefixed;
    }
    
    public final String component18() {
        return this.linkFlairText;
    }
    
    public final String component19() {
        return this.linkFlairId;
    }
    
    public final String component2() {
        return this.getKindWithId();
    }
    
    public final String component20() {
        return this.linkFlairTextColor;
    }
    
    public final String component21() {
        return this.linkFlairBackgroundColor;
    }
    
    public final List<FlairRichTextItem> component22() {
        return this.linkFlairRichTextObject;
    }
    
    public final List<FlairRichTextItem> component23() {
        return this.authorFlairRichTextObject;
    }
    
    public final String component24() {
        return this.author;
    }
    
    public final String component25() {
        return this.authorIconUrl;
    }
    
    public final String component26() {
        return this.authorSnoovatarUrl;
    }
    
    public final boolean component27() {
        return this.authorCakeday;
    }
    
    public final List<Award> component28() {
        return this.awards;
    }
    
    public final AwardLeaderboardStatus component29() {
        return this.awardLeaderboardStatus;
    }
    
    public final long component3() {
        return this.getCreatedUtc();
    }
    
    public final boolean component30() {
        return this.over18;
    }
    
    public final boolean component31() {
        return this.spoiler;
    }
    
    public final String component32() {
        return this.suggestedSort;
    }
    
    public final boolean component33() {
        return this.showMedia;
    }
    
    public final boolean component34() {
        return this.adsShowMedia;
    }
    
    public final String component35() {
        return this.thumbnail;
    }
    
    public final String component36() {
        return this.body;
    }
    
    public final Preview component37() {
        return this.preview;
    }
    
    public final Preview component38() {
        return this.blurredImagePreview;
    }
    
    public final LinkMedia component39() {
        return this.media;
    }
    
    public final String component4() {
        return this.getTitle();
    }
    
    public final String component40() {
        return this.selftext;
    }
    
    public final String component41() {
        return this.selftextHtml;
    }
    
    public final String component42() {
        return this.permalink;
    }
    
    public final boolean component43() {
        return this.isSelf;
    }
    
    public final String component44() {
        return this.postHint;
    }
    
    public final String component45() {
        return this.authorFlairText;
    }
    
    public final String component46() {
        return this.websocketUrl;
    }
    
    public final boolean component47() {
        return this.archived;
    }
    
    public final boolean component48() {
        return this.locked;
    }
    
    public final boolean component49() {
        return this.quarantine;
    }
    
    public final String component5() {
        return this.typename;
    }
    
    public final boolean component50() {
        return this.hidden;
    }
    
    public final boolean component51() {
        return this.subscribed;
    }
    
    public final boolean component52() {
        return this.saved;
    }
    
    public final boolean component53() {
        return this.ignoreReports;
    }
    
    public final boolean component54() {
        return this.hideScore;
    }
    
    public final boolean component55() {
        return this.stickied;
    }
    
    public final boolean component56() {
        return this.pinned;
    }
    
    public final boolean component57() {
        return this.canGild;
    }
    
    public final boolean component58() {
        return this.canMod;
    }
    
    public final String component59() {
        return this.distinguished;
    }
    
    public final String component6() {
        return this.domain;
    }
    
    public final String component60() {
        return this.approvedBy;
    }
    
    public final boolean component61() {
        return this.approved;
    }
    
    public final boolean component62() {
        return this.removed;
    }
    
    public final boolean component63() {
        return this.spam;
    }
    
    public final BannedBy component64() {
        return this.bannedBy;
    }
    
    public final Integer component65() {
        return this.numReports;
    }
    
    public final boolean component66() {
        return this.brandSafe;
    }
    
    public final boolean component67() {
        return this.isVideo;
    }
    
    public final String component68() {
        return this.locationName;
    }
    
    public final List<List<String>> component69() {
        return this.modReports;
    }
    
    public final String component7() {
        return this.url;
    }
    
    public final List<List<String>> component70() {
        return this.userReports;
    }
    
    public final ModQueueTriggers component71() {
        return this.modQueueTriggers;
    }
    
    public final NoteLabel component72() {
        return this.modNoteLabel;
    }
    
    public final List<Link> component73() {
        return this.crossPostParentList;
    }
    
    public final SubredditDetail component74() {
        return this.subredditDetail;
    }
    
    public final boolean component75() {
        return this.getPromoted();
    }
    
    public final boolean component76() {
        return this.isBlankAd();
    }
    
    public final Boolean component77() {
        return this.isSurveyAd;
    }
    
    public final PromoLayoutType component78() {
        return this.promoLayout;
    }
    
    public final List<AdEvent> component79() {
        return this.events;
    }
    
    public final int component8() {
        return this.score;
    }
    
    public final OutboundLink component80() {
        return this.outboundLink;
    }
    
    public final String component81() {
        return this.callToAction;
    }
    
    public final List<LinkCategory> component82() {
        return this.linkCategories;
    }
    
    public final boolean component83$model_release() {
        return this.isCrosspostable;
    }
    
    public final RichTextResponse component84() {
        return this.rtjson;
    }
    
    public final Map<String, MediaMetaData> component85() {
        return this.mediaMetadata;
    }
    
    public final PostPoll component86() {
        return this.poll;
    }
    
    public final PostPredictionsTournamentData component87() {
        return this.predictionsTournamentData;
    }
    
    public final RpanVideo component88() {
        return this.rpanVideo;
    }
    
    public final AudioRoom component89() {
        return this.audioRoom;
    }
    
    public final Boolean component9() {
        return this.voteState;
    }
    
    public final LegacyAudioRoom component90() {
        return this.liveAudio;
    }
    
    public final PostGallery component91() {
        return this.gallery;
    }
    
    public final RecommendationContext component92() {
        return this.recommendationContext;
    }
    
    public final List<CrowdsourceTaggingQuestion> component93() {
        return this.crowdsourceTaggingQuestions;
    }
    
    public final boolean component94() {
        return this.isRead;
    }
    
    public final boolean component95() {
        return this.isSubscribed;
    }
    
    public final String component96() {
        return this.authorFlairTemplateId;
    }
    
    public final String component97() {
        return this.authorFlairBackgroundColor;
    }
    
    public final String component98() {
        return this.authorFlairTextColor;
    }
    
    public final String component99() {
        return this.authorId;
    }
    
    public final Link copy(final String s, @n(name = "name") final String s2, @n(name = "created_utc") final long n, final String s3, @n(name = "typename") final String s4, final String s5, final String s6, final int n2, @n(name = "likes") final Boolean b, @n(name = "ups") final int n3, final double n4, @n(name = "downs") final int n5, @n(name = "num_comments") final long n6, @n(name = "view_count") final Long n7, final String s7, @n(name = "subreddit_id") final String s8, @n(name = "subreddit_name_prefixed") final String s9, @n(name = "link_flair_text") final String s10, @n(name = "link_flair_template_id") final String s11, @n(name = "link_flair_text_color") final String s12, @n(name = "link_flair_background_color") final String s13, @n(name = "link_flair_richtext") final List<FlairRichTextItem> list, @n(name = "author_flair_richtext") final List<FlairRichTextItem> list2, final String s14, @n(name = "author_icon_url") final String s15, @n(name = "snoovatar_img") final String s16, @n(name = "author_cakeday") final boolean b2, @n(name = "all_awardings") final List<Award> list3, @n(name = "top_awarded_type") final AwardLeaderboardStatus awardLeaderboardStatus, @n(name = "over_18") final boolean b3, final boolean b4, @n(name = "suggested_sort") final String s17, @n(name = "show_media") final boolean b5, @n(name = "ads_show_media") final boolean b6, final String s18, final String s19, final Preview preview, final Preview preview2, final LinkMedia linkMedia, final String s20, @n(name = "selftext_html") final String s21, final String s22, @n(name = "is_self") final boolean b7, @n(name = "post_hint") final String s23, @n(name = "author_flair_text") final String s24, @n(name = "websocket_url") final String s25, final boolean b8, final boolean b9, final boolean b10, final boolean b11, final boolean b12, final boolean b13, @n(name = "ignore_reports") final boolean b14, @n(name = "hide_score") final boolean b15, final boolean b16, final boolean b17, @n(name = "can_gild") final boolean b18, @n(name = "can_mod_post") final boolean b19, final String s26, @n(name = "approved_by") final String s27, final boolean b20, final boolean b21, final boolean b22, @n(name = "banned_by") final BannedBy bannedBy, @n(name = "num_reports") final Integer n8, @n(name = "brand_safe") final boolean b23, @n(name = "is_video") final boolean b24, @n(name = "location_name") final String s28, @n(name = "mod_reports") final List<? extends List<String>> list4, @n(name = "user_reports") final List<? extends List<String>> list5, final ModQueueTriggers modQueueTriggers, final NoteLabel noteLabel, @n(name = "crosspost_parent_list") final List<Link> list6, @n(name = "sr_detail") final SubredditDetail subredditDetail, @n(name = "promoted") final boolean b25, @n(name = "is_blank") final boolean b26, @n(name = "is_survey_ad") final Boolean b27, @n(name = "promo_layout") final PromoLayoutType promoLayoutType, @n(name = "events") final List<AdEvent> list7, @n(name = "outbound_link") final OutboundLink outboundLink, @n(name = "call_to_action") final String s29, @n(name = "post_categories") final List<LinkCategory> list8, @n(name = "is_crosspostable") final boolean b28, final RichTextResponse richTextResponse, @n(name = "media_metadata") final Map<String, MediaMetaData> map, @n(name = "poll_data") final PostPoll postPoll, @n(name = "tournament_data") final PostPredictionsTournamentData postPredictionsTournamentData, @n(name = "rpan_video") final RpanVideo rpanVideo, @n(name = "audio_room") final AudioRoom audioRoom, @n(name = "live_audio") final LegacyAudioRoom legacyAudioRoom, @n(name = "gallery_data") final PostGallery postGallery, @n(name = "recommendation_context") final RecommendationContext recommendationContext, final List<CrowdsourceTaggingQuestion> list9, final boolean b29, final boolean b30, @n(name = "author_flair_template_id") final String s30, @n(name = "author_flair_background_color") final String s31, @n(name = "author_flair_text_color") final String s32, @n(name = "author_fullname") final String s33, @n(name = "author_is_nsfw") final Boolean b31, @n(name = "author_is_blocked") final Boolean b32, @n(name = "unrepliable_reason") final String s34, @n(name = "is_followed") final boolean b33, @n(name = "event_start") final Long n9, @n(name = "event_end") final Long n10, @n(name = "is_live_stream") final boolean b34, @n(name = "discussion_type") final DiscussionType discussionType, @n(name = "is_meta") final Boolean b35, @n(name = "impression_id_str") final String s35, @n(name = "gallery_item_position") final Integer n11, @n(name = "app_store_data") final AppStoreData appStoreData, @n(name = "is_created_from_ads_ui") final Boolean b36, @n(name = "cta_media_color") final String s36, @n(name = "is_react_allowed") final boolean b37, @n(name = "reacted_from_id") final String s37, @n(name = "reacted_from_display_name") final String s38, @n(name = "post_set_posts") final List<Link> list10, @n(name = "post_set_share_limit") final Integer n12, final String s39, final List<Comment> list11, @n(name = "ad_supplementary_text_rt") final String s40, final CrowdControlFilterLevel crowdControlFilterLevel, final boolean b38) {
        f.f((Object)s, "id");
        f.f((Object)s2, "kindWithId");
        f.f((Object)s3, "title");
        f.f((Object)s5, "domain");
        f.f((Object)s6, "url");
        f.f((Object)s7, "subreddit");
        f.f((Object)s8, "subredditId");
        f.f((Object)s9, "subredditNamePrefixed");
        f.f((Object)s14, "author");
        f.f((Object)list3, "awards");
        f.f((Object)s20, "selftext");
        f.f((Object)s22, "permalink");
        f.f((Object)list4, "modReports");
        f.f((Object)list5, "userReports");
        f.f((Object)list9, "crowdsourceTaggingQuestions");
        return new Link(s, s2, n, s3, s4, s5, s6, n2, b, n3, n4, n5, n6, n7, s7, s8, s9, s10, s11, s12, s13, list, list2, s14, s15, s16, b2, list3, awardLeaderboardStatus, b3, b4, s17, b5, b6, s18, s19, preview, preview2, linkMedia, s20, s21, s22, b7, s23, s24, s25, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, s26, s27, b20, b21, b22, bannedBy, n8, b23, b24, s28, list4, list5, modQueueTriggers, noteLabel, list6, subredditDetail, b25, b26, b27, promoLayoutType, list7, outboundLink, s29, list8, b28, richTextResponse, map, postPoll, postPredictionsTournamentData, rpanVideo, audioRoom, legacyAudioRoom, postGallery, recommendationContext, list9, b29, b30, s30, s31, s32, s33, b31, b32, s34, b33, n9, n10, b34, discussionType, b35, s35, n11, appStoreData, b36, s36, b37, s37, s38, list10, n12, s39, list11, s40, crowdControlFilterLevel, b38);
    }
    
    public int describeContents() {
        return 0;
    }
    
    public boolean equals(final Object p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: aload_1        
        //     2: if_acmpne       7
        //     5: iconst_1       
        //     6: ireturn        
        //     7: aload_1        
        //     8: instanceof      Lcom/reddit/domain/model/Link;
        //    11: ifne            16
        //    14: iconst_0       
        //    15: ireturn        
        //    16: aload_1        
        //    17: checkcast       Lcom/reddit/domain/model/Link;
        //    20: astore_1       
        //    21: aload_0        
        //    22: invokevirtual   com/reddit/domain/model/Link.getId:()Ljava/lang/String;
        //    25: aload_1        
        //    26: invokevirtual   com/reddit/domain/model/Link.getId:()Ljava/lang/String;
        //    29: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //    32: ifne            37
        //    35: iconst_0       
        //    36: ireturn        
        //    37: aload_0        
        //    38: invokevirtual   com/reddit/domain/model/Link.getKindWithId:()Ljava/lang/String;
        //    41: aload_1        
        //    42: invokevirtual   com/reddit/domain/model/Link.getKindWithId:()Ljava/lang/String;
        //    45: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //    48: ifne            53
        //    51: iconst_0       
        //    52: ireturn        
        //    53: aload_0        
        //    54: invokevirtual   com/reddit/domain/model/Link.getCreatedUtc:()J
        //    57: aload_1        
        //    58: invokevirtual   com/reddit/domain/model/Link.getCreatedUtc:()J
        //    61: lcmp           
        //    62: ifeq            67
        //    65: iconst_0       
        //    66: ireturn        
        //    67: aload_0        
        //    68: invokevirtual   com/reddit/domain/model/Link.getTitle:()Ljava/lang/String;
        //    71: aload_1        
        //    72: invokevirtual   com/reddit/domain/model/Link.getTitle:()Ljava/lang/String;
        //    75: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //    78: ifne            83
        //    81: iconst_0       
        //    82: ireturn        
        //    83: aload_0        
        //    84: getfield        com/reddit/domain/model/Link.typename:Ljava/lang/String;
        //    87: aload_1        
        //    88: getfield        com/reddit/domain/model/Link.typename:Ljava/lang/String;
        //    91: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //    94: ifne            99
        //    97: iconst_0       
        //    98: ireturn        
        //    99: aload_0        
        //   100: getfield        com/reddit/domain/model/Link.domain:Ljava/lang/String;
        //   103: aload_1        
        //   104: getfield        com/reddit/domain/model/Link.domain:Ljava/lang/String;
        //   107: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   110: ifne            115
        //   113: iconst_0       
        //   114: ireturn        
        //   115: aload_0        
        //   116: getfield        com/reddit/domain/model/Link.url:Ljava/lang/String;
        //   119: aload_1        
        //   120: getfield        com/reddit/domain/model/Link.url:Ljava/lang/String;
        //   123: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   126: ifne            131
        //   129: iconst_0       
        //   130: ireturn        
        //   131: aload_0        
        //   132: getfield        com/reddit/domain/model/Link.score:I
        //   135: aload_1        
        //   136: getfield        com/reddit/domain/model/Link.score:I
        //   139: if_icmpeq       144
        //   142: iconst_0       
        //   143: ireturn        
        //   144: aload_0        
        //   145: getfield        com/reddit/domain/model/Link.voteState:Ljava/lang/Boolean;
        //   148: aload_1        
        //   149: getfield        com/reddit/domain/model/Link.voteState:Ljava/lang/Boolean;
        //   152: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   155: ifne            160
        //   158: iconst_0       
        //   159: ireturn        
        //   160: aload_0        
        //   161: getfield        com/reddit/domain/model/Link.upvoteCount:I
        //   164: aload_1        
        //   165: getfield        com/reddit/domain/model/Link.upvoteCount:I
        //   168: if_icmpeq       173
        //   171: iconst_0       
        //   172: ireturn        
        //   173: aload_0        
        //   174: getfield        com/reddit/domain/model/Link.upvoteRatio:D
        //   177: invokestatic    java/lang/Double.valueOf:(D)Ljava/lang/Double;
        //   180: aload_1        
        //   181: getfield        com/reddit/domain/model/Link.upvoteRatio:D
        //   184: invokestatic    java/lang/Double.valueOf:(D)Ljava/lang/Double;
        //   187: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   190: ifne            195
        //   193: iconst_0       
        //   194: ireturn        
        //   195: aload_0        
        //   196: getfield        com/reddit/domain/model/Link.downvoteCount:I
        //   199: aload_1        
        //   200: getfield        com/reddit/domain/model/Link.downvoteCount:I
        //   203: if_icmpeq       208
        //   206: iconst_0       
        //   207: ireturn        
        //   208: aload_0        
        //   209: getfield        com/reddit/domain/model/Link.numComments:J
        //   212: aload_1        
        //   213: getfield        com/reddit/domain/model/Link.numComments:J
        //   216: lcmp           
        //   217: ifeq            222
        //   220: iconst_0       
        //   221: ireturn        
        //   222: aload_0        
        //   223: getfield        com/reddit/domain/model/Link.viewCount:Ljava/lang/Long;
        //   226: aload_1        
        //   227: getfield        com/reddit/domain/model/Link.viewCount:Ljava/lang/Long;
        //   230: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   233: ifne            238
        //   236: iconst_0       
        //   237: ireturn        
        //   238: aload_0        
        //   239: invokevirtual   com/reddit/domain/model/Link.getSubreddit:()Ljava/lang/String;
        //   242: aload_1        
        //   243: invokevirtual   com/reddit/domain/model/Link.getSubreddit:()Ljava/lang/String;
        //   246: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   249: ifne            254
        //   252: iconst_0       
        //   253: ireturn        
        //   254: aload_0        
        //   255: invokevirtual   com/reddit/domain/model/Link.getSubredditId:()Ljava/lang/String;
        //   258: aload_1        
        //   259: invokevirtual   com/reddit/domain/model/Link.getSubredditId:()Ljava/lang/String;
        //   262: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   265: ifne            270
        //   268: iconst_0       
        //   269: ireturn        
        //   270: aload_0        
        //   271: getfield        com/reddit/domain/model/Link.subredditNamePrefixed:Ljava/lang/String;
        //   274: aload_1        
        //   275: getfield        com/reddit/domain/model/Link.subredditNamePrefixed:Ljava/lang/String;
        //   278: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   281: ifne            286
        //   284: iconst_0       
        //   285: ireturn        
        //   286: aload_0        
        //   287: getfield        com/reddit/domain/model/Link.linkFlairText:Ljava/lang/String;
        //   290: aload_1        
        //   291: getfield        com/reddit/domain/model/Link.linkFlairText:Ljava/lang/String;
        //   294: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   297: ifne            302
        //   300: iconst_0       
        //   301: ireturn        
        //   302: aload_0        
        //   303: getfield        com/reddit/domain/model/Link.linkFlairId:Ljava/lang/String;
        //   306: aload_1        
        //   307: getfield        com/reddit/domain/model/Link.linkFlairId:Ljava/lang/String;
        //   310: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   313: ifne            318
        //   316: iconst_0       
        //   317: ireturn        
        //   318: aload_0        
        //   319: getfield        com/reddit/domain/model/Link.linkFlairTextColor:Ljava/lang/String;
        //   322: aload_1        
        //   323: getfield        com/reddit/domain/model/Link.linkFlairTextColor:Ljava/lang/String;
        //   326: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   329: ifne            334
        //   332: iconst_0       
        //   333: ireturn        
        //   334: aload_0        
        //   335: getfield        com/reddit/domain/model/Link.linkFlairBackgroundColor:Ljava/lang/String;
        //   338: aload_1        
        //   339: getfield        com/reddit/domain/model/Link.linkFlairBackgroundColor:Ljava/lang/String;
        //   342: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   345: ifne            350
        //   348: iconst_0       
        //   349: ireturn        
        //   350: aload_0        
        //   351: getfield        com/reddit/domain/model/Link.linkFlairRichTextObject:Ljava/util/List;
        //   354: aload_1        
        //   355: getfield        com/reddit/domain/model/Link.linkFlairRichTextObject:Ljava/util/List;
        //   358: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   361: ifne            366
        //   364: iconst_0       
        //   365: ireturn        
        //   366: aload_0        
        //   367: getfield        com/reddit/domain/model/Link.authorFlairRichTextObject:Ljava/util/List;
        //   370: aload_1        
        //   371: getfield        com/reddit/domain/model/Link.authorFlairRichTextObject:Ljava/util/List;
        //   374: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   377: ifne            382
        //   380: iconst_0       
        //   381: ireturn        
        //   382: aload_0        
        //   383: getfield        com/reddit/domain/model/Link.author:Ljava/lang/String;
        //   386: aload_1        
        //   387: getfield        com/reddit/domain/model/Link.author:Ljava/lang/String;
        //   390: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   393: ifne            398
        //   396: iconst_0       
        //   397: ireturn        
        //   398: aload_0        
        //   399: getfield        com/reddit/domain/model/Link.authorIconUrl:Ljava/lang/String;
        //   402: aload_1        
        //   403: getfield        com/reddit/domain/model/Link.authorIconUrl:Ljava/lang/String;
        //   406: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   409: ifne            414
        //   412: iconst_0       
        //   413: ireturn        
        //   414: aload_0        
        //   415: getfield        com/reddit/domain/model/Link.authorSnoovatarUrl:Ljava/lang/String;
        //   418: aload_1        
        //   419: getfield        com/reddit/domain/model/Link.authorSnoovatarUrl:Ljava/lang/String;
        //   422: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   425: ifne            430
        //   428: iconst_0       
        //   429: ireturn        
        //   430: aload_0        
        //   431: getfield        com/reddit/domain/model/Link.authorCakeday:Z
        //   434: aload_1        
        //   435: getfield        com/reddit/domain/model/Link.authorCakeday:Z
        //   438: if_icmpeq       443
        //   441: iconst_0       
        //   442: ireturn        
        //   443: aload_0        
        //   444: getfield        com/reddit/domain/model/Link.awards:Ljava/util/List;
        //   447: aload_1        
        //   448: getfield        com/reddit/domain/model/Link.awards:Ljava/util/List;
        //   451: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   454: ifne            459
        //   457: iconst_0       
        //   458: ireturn        
        //   459: aload_0        
        //   460: getfield        com/reddit/domain/model/Link.awardLeaderboardStatus:Lcom/reddit/domain/awardsleaderboard/AwardLeaderboardStatus;
        //   463: aload_1        
        //   464: getfield        com/reddit/domain/model/Link.awardLeaderboardStatus:Lcom/reddit/domain/awardsleaderboard/AwardLeaderboardStatus;
        //   467: if_acmpeq       472
        //   470: iconst_0       
        //   471: ireturn        
        //   472: aload_0        
        //   473: getfield        com/reddit/domain/model/Link.over18:Z
        //   476: aload_1        
        //   477: getfield        com/reddit/domain/model/Link.over18:Z
        //   480: if_icmpeq       485
        //   483: iconst_0       
        //   484: ireturn        
        //   485: aload_0        
        //   486: getfield        com/reddit/domain/model/Link.spoiler:Z
        //   489: aload_1        
        //   490: getfield        com/reddit/domain/model/Link.spoiler:Z
        //   493: if_icmpeq       498
        //   496: iconst_0       
        //   497: ireturn        
        //   498: aload_0        
        //   499: getfield        com/reddit/domain/model/Link.suggestedSort:Ljava/lang/String;
        //   502: aload_1        
        //   503: getfield        com/reddit/domain/model/Link.suggestedSort:Ljava/lang/String;
        //   506: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   509: ifne            514
        //   512: iconst_0       
        //   513: ireturn        
        //   514: aload_0        
        //   515: getfield        com/reddit/domain/model/Link.showMedia:Z
        //   518: aload_1        
        //   519: getfield        com/reddit/domain/model/Link.showMedia:Z
        //   522: if_icmpeq       527
        //   525: iconst_0       
        //   526: ireturn        
        //   527: aload_0        
        //   528: getfield        com/reddit/domain/model/Link.adsShowMedia:Z
        //   531: aload_1        
        //   532: getfield        com/reddit/domain/model/Link.adsShowMedia:Z
        //   535: if_icmpeq       540
        //   538: iconst_0       
        //   539: ireturn        
        //   540: aload_0        
        //   541: getfield        com/reddit/domain/model/Link.thumbnail:Ljava/lang/String;
        //   544: aload_1        
        //   545: getfield        com/reddit/domain/model/Link.thumbnail:Ljava/lang/String;
        //   548: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   551: ifne            556
        //   554: iconst_0       
        //   555: ireturn        
        //   556: aload_0        
        //   557: getfield        com/reddit/domain/model/Link.body:Ljava/lang/String;
        //   560: aload_1        
        //   561: getfield        com/reddit/domain/model/Link.body:Ljava/lang/String;
        //   564: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   567: ifne            572
        //   570: iconst_0       
        //   571: ireturn        
        //   572: aload_0        
        //   573: getfield        com/reddit/domain/model/Link.preview:Lcom/reddit/domain/model/Preview;
        //   576: aload_1        
        //   577: getfield        com/reddit/domain/model/Link.preview:Lcom/reddit/domain/model/Preview;
        //   580: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   583: ifne            588
        //   586: iconst_0       
        //   587: ireturn        
        //   588: aload_0        
        //   589: getfield        com/reddit/domain/model/Link.blurredImagePreview:Lcom/reddit/domain/model/Preview;
        //   592: aload_1        
        //   593: getfield        com/reddit/domain/model/Link.blurredImagePreview:Lcom/reddit/domain/model/Preview;
        //   596: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   599: ifne            604
        //   602: iconst_0       
        //   603: ireturn        
        //   604: aload_0        
        //   605: getfield        com/reddit/domain/model/Link.media:Lcom/reddit/domain/model/LinkMedia;
        //   608: aload_1        
        //   609: getfield        com/reddit/domain/model/Link.media:Lcom/reddit/domain/model/LinkMedia;
        //   612: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   615: ifne            620
        //   618: iconst_0       
        //   619: ireturn        
        //   620: aload_0        
        //   621: getfield        com/reddit/domain/model/Link.selftext:Ljava/lang/String;
        //   624: aload_1        
        //   625: getfield        com/reddit/domain/model/Link.selftext:Ljava/lang/String;
        //   628: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   631: ifne            636
        //   634: iconst_0       
        //   635: ireturn        
        //   636: aload_0        
        //   637: getfield        com/reddit/domain/model/Link.selftextHtml:Ljava/lang/String;
        //   640: aload_1        
        //   641: getfield        com/reddit/domain/model/Link.selftextHtml:Ljava/lang/String;
        //   644: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   647: ifne            652
        //   650: iconst_0       
        //   651: ireturn        
        //   652: aload_0        
        //   653: getfield        com/reddit/domain/model/Link.permalink:Ljava/lang/String;
        //   656: aload_1        
        //   657: getfield        com/reddit/domain/model/Link.permalink:Ljava/lang/String;
        //   660: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   663: ifne            668
        //   666: iconst_0       
        //   667: ireturn        
        //   668: aload_0        
        //   669: getfield        com/reddit/domain/model/Link.isSelf:Z
        //   672: aload_1        
        //   673: getfield        com/reddit/domain/model/Link.isSelf:Z
        //   676: if_icmpeq       681
        //   679: iconst_0       
        //   680: ireturn        
        //   681: aload_0        
        //   682: getfield        com/reddit/domain/model/Link.postHint:Ljava/lang/String;
        //   685: aload_1        
        //   686: getfield        com/reddit/domain/model/Link.postHint:Ljava/lang/String;
        //   689: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   692: ifne            697
        //   695: iconst_0       
        //   696: ireturn        
        //   697: aload_0        
        //   698: getfield        com/reddit/domain/model/Link.authorFlairText:Ljava/lang/String;
        //   701: aload_1        
        //   702: getfield        com/reddit/domain/model/Link.authorFlairText:Ljava/lang/String;
        //   705: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   708: ifne            713
        //   711: iconst_0       
        //   712: ireturn        
        //   713: aload_0        
        //   714: getfield        com/reddit/domain/model/Link.websocketUrl:Ljava/lang/String;
        //   717: aload_1        
        //   718: getfield        com/reddit/domain/model/Link.websocketUrl:Ljava/lang/String;
        //   721: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   724: ifne            729
        //   727: iconst_0       
        //   728: ireturn        
        //   729: aload_0        
        //   730: getfield        com/reddit/domain/model/Link.archived:Z
        //   733: aload_1        
        //   734: getfield        com/reddit/domain/model/Link.archived:Z
        //   737: if_icmpeq       742
        //   740: iconst_0       
        //   741: ireturn        
        //   742: aload_0        
        //   743: getfield        com/reddit/domain/model/Link.locked:Z
        //   746: aload_1        
        //   747: getfield        com/reddit/domain/model/Link.locked:Z
        //   750: if_icmpeq       755
        //   753: iconst_0       
        //   754: ireturn        
        //   755: aload_0        
        //   756: getfield        com/reddit/domain/model/Link.quarantine:Z
        //   759: aload_1        
        //   760: getfield        com/reddit/domain/model/Link.quarantine:Z
        //   763: if_icmpeq       768
        //   766: iconst_0       
        //   767: ireturn        
        //   768: aload_0        
        //   769: getfield        com/reddit/domain/model/Link.hidden:Z
        //   772: aload_1        
        //   773: getfield        com/reddit/domain/model/Link.hidden:Z
        //   776: if_icmpeq       781
        //   779: iconst_0       
        //   780: ireturn        
        //   781: aload_0        
        //   782: getfield        com/reddit/domain/model/Link.subscribed:Z
        //   785: aload_1        
        //   786: getfield        com/reddit/domain/model/Link.subscribed:Z
        //   789: if_icmpeq       794
        //   792: iconst_0       
        //   793: ireturn        
        //   794: aload_0        
        //   795: getfield        com/reddit/domain/model/Link.saved:Z
        //   798: aload_1        
        //   799: getfield        com/reddit/domain/model/Link.saved:Z
        //   802: if_icmpeq       807
        //   805: iconst_0       
        //   806: ireturn        
        //   807: aload_0        
        //   808: getfield        com/reddit/domain/model/Link.ignoreReports:Z
        //   811: aload_1        
        //   812: getfield        com/reddit/domain/model/Link.ignoreReports:Z
        //   815: if_icmpeq       820
        //   818: iconst_0       
        //   819: ireturn        
        //   820: aload_0        
        //   821: getfield        com/reddit/domain/model/Link.hideScore:Z
        //   824: aload_1        
        //   825: getfield        com/reddit/domain/model/Link.hideScore:Z
        //   828: if_icmpeq       833
        //   831: iconst_0       
        //   832: ireturn        
        //   833: aload_0        
        //   834: getfield        com/reddit/domain/model/Link.stickied:Z
        //   837: aload_1        
        //   838: getfield        com/reddit/domain/model/Link.stickied:Z
        //   841: if_icmpeq       846
        //   844: iconst_0       
        //   845: ireturn        
        //   846: aload_0        
        //   847: getfield        com/reddit/domain/model/Link.pinned:Z
        //   850: aload_1        
        //   851: getfield        com/reddit/domain/model/Link.pinned:Z
        //   854: if_icmpeq       859
        //   857: iconst_0       
        //   858: ireturn        
        //   859: aload_0        
        //   860: getfield        com/reddit/domain/model/Link.canGild:Z
        //   863: aload_1        
        //   864: getfield        com/reddit/domain/model/Link.canGild:Z
        //   867: if_icmpeq       872
        //   870: iconst_0       
        //   871: ireturn        
        //   872: aload_0        
        //   873: getfield        com/reddit/domain/model/Link.canMod:Z
        //   876: aload_1        
        //   877: getfield        com/reddit/domain/model/Link.canMod:Z
        //   880: if_icmpeq       885
        //   883: iconst_0       
        //   884: ireturn        
        //   885: aload_0        
        //   886: getfield        com/reddit/domain/model/Link.distinguished:Ljava/lang/String;
        //   889: aload_1        
        //   890: getfield        com/reddit/domain/model/Link.distinguished:Ljava/lang/String;
        //   893: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   896: ifne            901
        //   899: iconst_0       
        //   900: ireturn        
        //   901: aload_0        
        //   902: getfield        com/reddit/domain/model/Link.approvedBy:Ljava/lang/String;
        //   905: aload_1        
        //   906: getfield        com/reddit/domain/model/Link.approvedBy:Ljava/lang/String;
        //   909: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   912: ifne            917
        //   915: iconst_0       
        //   916: ireturn        
        //   917: aload_0        
        //   918: getfield        com/reddit/domain/model/Link.approved:Z
        //   921: aload_1        
        //   922: getfield        com/reddit/domain/model/Link.approved:Z
        //   925: if_icmpeq       930
        //   928: iconst_0       
        //   929: ireturn        
        //   930: aload_0        
        //   931: getfield        com/reddit/domain/model/Link.removed:Z
        //   934: aload_1        
        //   935: getfield        com/reddit/domain/model/Link.removed:Z
        //   938: if_icmpeq       943
        //   941: iconst_0       
        //   942: ireturn        
        //   943: aload_0        
        //   944: getfield        com/reddit/domain/model/Link.spam:Z
        //   947: aload_1        
        //   948: getfield        com/reddit/domain/model/Link.spam:Z
        //   951: if_icmpeq       956
        //   954: iconst_0       
        //   955: ireturn        
        //   956: aload_0        
        //   957: getfield        com/reddit/domain/model/Link.bannedBy:Lcom/reddit/domain/model/mod/BannedBy;
        //   960: aload_1        
        //   961: getfield        com/reddit/domain/model/Link.bannedBy:Lcom/reddit/domain/model/mod/BannedBy;
        //   964: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   967: ifne            972
        //   970: iconst_0       
        //   971: ireturn        
        //   972: aload_0        
        //   973: getfield        com/reddit/domain/model/Link.numReports:Ljava/lang/Integer;
        //   976: aload_1        
        //   977: getfield        com/reddit/domain/model/Link.numReports:Ljava/lang/Integer;
        //   980: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //   983: ifne            988
        //   986: iconst_0       
        //   987: ireturn        
        //   988: aload_0        
        //   989: getfield        com/reddit/domain/model/Link.brandSafe:Z
        //   992: aload_1        
        //   993: getfield        com/reddit/domain/model/Link.brandSafe:Z
        //   996: if_icmpeq       1001
        //   999: iconst_0       
        //  1000: ireturn        
        //  1001: aload_0        
        //  1002: getfield        com/reddit/domain/model/Link.isVideo:Z
        //  1005: aload_1        
        //  1006: getfield        com/reddit/domain/model/Link.isVideo:Z
        //  1009: if_icmpeq       1014
        //  1012: iconst_0       
        //  1013: ireturn        
        //  1014: aload_0        
        //  1015: getfield        com/reddit/domain/model/Link.locationName:Ljava/lang/String;
        //  1018: aload_1        
        //  1019: getfield        com/reddit/domain/model/Link.locationName:Ljava/lang/String;
        //  1022: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1025: ifne            1030
        //  1028: iconst_0       
        //  1029: ireturn        
        //  1030: aload_0        
        //  1031: getfield        com/reddit/domain/model/Link.modReports:Ljava/util/List;
        //  1034: aload_1        
        //  1035: getfield        com/reddit/domain/model/Link.modReports:Ljava/util/List;
        //  1038: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1041: ifne            1046
        //  1044: iconst_0       
        //  1045: ireturn        
        //  1046: aload_0        
        //  1047: getfield        com/reddit/domain/model/Link.userReports:Ljava/util/List;
        //  1050: aload_1        
        //  1051: getfield        com/reddit/domain/model/Link.userReports:Ljava/util/List;
        //  1054: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1057: ifne            1062
        //  1060: iconst_0       
        //  1061: ireturn        
        //  1062: aload_0        
        //  1063: getfield        com/reddit/domain/model/Link.modQueueTriggers:Lcom/reddit/domain/modtools/ModQueueTriggers;
        //  1066: aload_1        
        //  1067: getfield        com/reddit/domain/model/Link.modQueueTriggers:Lcom/reddit/domain/modtools/ModQueueTriggers;
        //  1070: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1073: ifne            1078
        //  1076: iconst_0       
        //  1077: ireturn        
        //  1078: aload_0        
        //  1079: getfield        com/reddit/domain/model/Link.modNoteLabel:Lcom/reddit/mod/notes/domain/model/NoteLabel;
        //  1082: aload_1        
        //  1083: getfield        com/reddit/domain/model/Link.modNoteLabel:Lcom/reddit/mod/notes/domain/model/NoteLabel;
        //  1086: if_acmpeq       1091
        //  1089: iconst_0       
        //  1090: ireturn        
        //  1091: aload_0        
        //  1092: getfield        com/reddit/domain/model/Link.crossPostParentList:Ljava/util/List;
        //  1095: aload_1        
        //  1096: getfield        com/reddit/domain/model/Link.crossPostParentList:Ljava/util/List;
        //  1099: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1102: ifne            1107
        //  1105: iconst_0       
        //  1106: ireturn        
        //  1107: aload_0        
        //  1108: getfield        com/reddit/domain/model/Link.subredditDetail:Lcom/reddit/domain/model/SubredditDetail;
        //  1111: aload_1        
        //  1112: getfield        com/reddit/domain/model/Link.subredditDetail:Lcom/reddit/domain/model/SubredditDetail;
        //  1115: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1118: ifne            1123
        //  1121: iconst_0       
        //  1122: ireturn        
        //  1123: aload_0        
        //  1124: invokevirtual   com/reddit/domain/model/Link.getPromoted:()Z
        //  1127: aload_1        
        //  1128: invokevirtual   com/reddit/domain/model/Link.getPromoted:()Z
        //  1131: if_icmpeq       1136
        //  1134: iconst_0       
        //  1135: ireturn        
        //  1136: aload_0        
        //  1137: invokevirtual   com/reddit/domain/model/Link.isBlankAd:()Z
        //  1140: aload_1        
        //  1141: invokevirtual   com/reddit/domain/model/Link.isBlankAd:()Z
        //  1144: if_icmpeq       1149
        //  1147: iconst_0       
        //  1148: ireturn        
        //  1149: aload_0        
        //  1150: getfield        com/reddit/domain/model/Link.isSurveyAd:Ljava/lang/Boolean;
        //  1153: aload_1        
        //  1154: getfield        com/reddit/domain/model/Link.isSurveyAd:Ljava/lang/Boolean;
        //  1157: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1160: ifne            1165
        //  1163: iconst_0       
        //  1164: ireturn        
        //  1165: aload_0        
        //  1166: getfield        com/reddit/domain/model/Link.promoLayout:Lcom/reddit/ads/domain/PromoLayoutType;
        //  1169: aload_1        
        //  1170: getfield        com/reddit/domain/model/Link.promoLayout:Lcom/reddit/ads/domain/PromoLayoutType;
        //  1173: if_acmpeq       1178
        //  1176: iconst_0       
        //  1177: ireturn        
        //  1178: aload_0        
        //  1179: getfield        com/reddit/domain/model/Link.events:Ljava/util/List;
        //  1182: aload_1        
        //  1183: getfield        com/reddit/domain/model/Link.events:Ljava/util/List;
        //  1186: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1189: ifne            1194
        //  1192: iconst_0       
        //  1193: ireturn        
        //  1194: aload_0        
        //  1195: getfield        com/reddit/domain/model/Link.outboundLink:Lcom/reddit/domain/model/OutboundLink;
        //  1198: aload_1        
        //  1199: getfield        com/reddit/domain/model/Link.outboundLink:Lcom/reddit/domain/model/OutboundLink;
        //  1202: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1205: ifne            1210
        //  1208: iconst_0       
        //  1209: ireturn        
        //  1210: aload_0        
        //  1211: getfield        com/reddit/domain/model/Link.callToAction:Ljava/lang/String;
        //  1214: aload_1        
        //  1215: getfield        com/reddit/domain/model/Link.callToAction:Ljava/lang/String;
        //  1218: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1221: ifne            1226
        //  1224: iconst_0       
        //  1225: ireturn        
        //  1226: aload_0        
        //  1227: getfield        com/reddit/domain/model/Link.linkCategories:Ljava/util/List;
        //  1230: aload_1        
        //  1231: getfield        com/reddit/domain/model/Link.linkCategories:Ljava/util/List;
        //  1234: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1237: ifne            1242
        //  1240: iconst_0       
        //  1241: ireturn        
        //  1242: aload_0        
        //  1243: getfield        com/reddit/domain/model/Link.isCrosspostable:Z
        //  1246: aload_1        
        //  1247: getfield        com/reddit/domain/model/Link.isCrosspostable:Z
        //  1250: if_icmpeq       1255
        //  1253: iconst_0       
        //  1254: ireturn        
        //  1255: aload_0        
        //  1256: getfield        com/reddit/domain/model/Link.rtjson:Lcom/reddit/domain/model/RichTextResponse;
        //  1259: aload_1        
        //  1260: getfield        com/reddit/domain/model/Link.rtjson:Lcom/reddit/domain/model/RichTextResponse;
        //  1263: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1266: ifne            1271
        //  1269: iconst_0       
        //  1270: ireturn        
        //  1271: aload_0        
        //  1272: getfield        com/reddit/domain/model/Link.mediaMetadata:Ljava/util/Map;
        //  1275: aload_1        
        //  1276: getfield        com/reddit/domain/model/Link.mediaMetadata:Ljava/util/Map;
        //  1279: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1282: ifne            1287
        //  1285: iconst_0       
        //  1286: ireturn        
        //  1287: aload_0        
        //  1288: getfield        com/reddit/domain/model/Link.poll:Lcom/reddit/domain/model/PostPoll;
        //  1291: aload_1        
        //  1292: getfield        com/reddit/domain/model/Link.poll:Lcom/reddit/domain/model/PostPoll;
        //  1295: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1298: ifne            1303
        //  1301: iconst_0       
        //  1302: ireturn        
        //  1303: aload_0        
        //  1304: getfield        com/reddit/domain/model/Link.predictionsTournamentData:Lcom/reddit/domain/model/predictions/PostPredictionsTournamentData;
        //  1307: aload_1        
        //  1308: getfield        com/reddit/domain/model/Link.predictionsTournamentData:Lcom/reddit/domain/model/predictions/PostPredictionsTournamentData;
        //  1311: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1314: ifne            1319
        //  1317: iconst_0       
        //  1318: ireturn        
        //  1319: aload_0        
        //  1320: getfield        com/reddit/domain/model/Link.rpanVideo:Lcom/reddit/domain/model/RpanVideo;
        //  1323: aload_1        
        //  1324: getfield        com/reddit/domain/model/Link.rpanVideo:Lcom/reddit/domain/model/RpanVideo;
        //  1327: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1330: ifne            1335
        //  1333: iconst_0       
        //  1334: ireturn        
        //  1335: aload_0        
        //  1336: getfield        com/reddit/domain/model/Link.audioRoom:Lcom/reddit/domain/model/liveaudio/AudioRoom;
        //  1339: aload_1        
        //  1340: getfield        com/reddit/domain/model/Link.audioRoom:Lcom/reddit/domain/model/liveaudio/AudioRoom;
        //  1343: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1346: ifne            1351
        //  1349: iconst_0       
        //  1350: ireturn        
        //  1351: aload_0        
        //  1352: getfield        com/reddit/domain/model/Link.liveAudio:Lcom/reddit/domain/model/liveaudio/LegacyAudioRoom;
        //  1355: aload_1        
        //  1356: getfield        com/reddit/domain/model/Link.liveAudio:Lcom/reddit/domain/model/liveaudio/LegacyAudioRoom;
        //  1359: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1362: ifne            1367
        //  1365: iconst_0       
        //  1366: ireturn        
        //  1367: aload_0        
        //  1368: getfield        com/reddit/domain/model/Link.gallery:Lcom/reddit/domain/model/PostGallery;
        //  1371: aload_1        
        //  1372: getfield        com/reddit/domain/model/Link.gallery:Lcom/reddit/domain/model/PostGallery;
        //  1375: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1378: ifne            1383
        //  1381: iconst_0       
        //  1382: ireturn        
        //  1383: aload_0        
        //  1384: getfield        com/reddit/domain/model/Link.recommendationContext:Lcom/reddit/domain/model/listing/RecommendationContext;
        //  1387: aload_1        
        //  1388: getfield        com/reddit/domain/model/Link.recommendationContext:Lcom/reddit/domain/model/listing/RecommendationContext;
        //  1391: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1394: ifne            1399
        //  1397: iconst_0       
        //  1398: ireturn        
        //  1399: aload_0        
        //  1400: getfield        com/reddit/domain/model/Link.crowdsourceTaggingQuestions:Ljava/util/List;
        //  1403: aload_1        
        //  1404: getfield        com/reddit/domain/model/Link.crowdsourceTaggingQuestions:Ljava/util/List;
        //  1407: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1410: ifne            1415
        //  1413: iconst_0       
        //  1414: ireturn        
        //  1415: aload_0        
        //  1416: getfield        com/reddit/domain/model/Link.isRead:Z
        //  1419: aload_1        
        //  1420: getfield        com/reddit/domain/model/Link.isRead:Z
        //  1423: if_icmpeq       1428
        //  1426: iconst_0       
        //  1427: ireturn        
        //  1428: aload_0        
        //  1429: getfield        com/reddit/domain/model/Link.isSubscribed:Z
        //  1432: aload_1        
        //  1433: getfield        com/reddit/domain/model/Link.isSubscribed:Z
        //  1436: if_icmpeq       1441
        //  1439: iconst_0       
        //  1440: ireturn        
        //  1441: aload_0        
        //  1442: getfield        com/reddit/domain/model/Link.authorFlairTemplateId:Ljava/lang/String;
        //  1445: aload_1        
        //  1446: getfield        com/reddit/domain/model/Link.authorFlairTemplateId:Ljava/lang/String;
        //  1449: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1452: ifne            1457
        //  1455: iconst_0       
        //  1456: ireturn        
        //  1457: aload_0        
        //  1458: getfield        com/reddit/domain/model/Link.authorFlairBackgroundColor:Ljava/lang/String;
        //  1461: aload_1        
        //  1462: getfield        com/reddit/domain/model/Link.authorFlairBackgroundColor:Ljava/lang/String;
        //  1465: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1468: ifne            1473
        //  1471: iconst_0       
        //  1472: ireturn        
        //  1473: aload_0        
        //  1474: getfield        com/reddit/domain/model/Link.authorFlairTextColor:Ljava/lang/String;
        //  1477: aload_1        
        //  1478: getfield        com/reddit/domain/model/Link.authorFlairTextColor:Ljava/lang/String;
        //  1481: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1484: ifne            1489
        //  1487: iconst_0       
        //  1488: ireturn        
        //  1489: aload_0        
        //  1490: getfield        com/reddit/domain/model/Link.authorId:Ljava/lang/String;
        //  1493: aload_1        
        //  1494: getfield        com/reddit/domain/model/Link.authorId:Ljava/lang/String;
        //  1497: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1500: ifne            1505
        //  1503: iconst_0       
        //  1504: ireturn        
        //  1505: aload_0        
        //  1506: getfield        com/reddit/domain/model/Link.authorIsNSFW:Ljava/lang/Boolean;
        //  1509: aload_1        
        //  1510: getfield        com/reddit/domain/model/Link.authorIsNSFW:Ljava/lang/Boolean;
        //  1513: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1516: ifne            1521
        //  1519: iconst_0       
        //  1520: ireturn        
        //  1521: aload_0        
        //  1522: getfield        com/reddit/domain/model/Link.authorIsBlocked:Ljava/lang/Boolean;
        //  1525: aload_1        
        //  1526: getfield        com/reddit/domain/model/Link.authorIsBlocked:Ljava/lang/Boolean;
        //  1529: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1532: ifne            1537
        //  1535: iconst_0       
        //  1536: ireturn        
        //  1537: aload_0        
        //  1538: getfield        com/reddit/domain/model/Link.unrepliableReason:Ljava/lang/String;
        //  1541: aload_1        
        //  1542: getfield        com/reddit/domain/model/Link.unrepliableReason:Ljava/lang/String;
        //  1545: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1548: ifne            1553
        //  1551: iconst_0       
        //  1552: ireturn        
        //  1553: aload_0        
        //  1554: getfield        com/reddit/domain/model/Link.followed:Z
        //  1557: aload_1        
        //  1558: getfield        com/reddit/domain/model/Link.followed:Z
        //  1561: if_icmpeq       1566
        //  1564: iconst_0       
        //  1565: ireturn        
        //  1566: aload_0        
        //  1567: getfield        com/reddit/domain/model/Link.eventStartUtc:Ljava/lang/Long;
        //  1570: aload_1        
        //  1571: getfield        com/reddit/domain/model/Link.eventStartUtc:Ljava/lang/Long;
        //  1574: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1577: ifne            1582
        //  1580: iconst_0       
        //  1581: ireturn        
        //  1582: aload_0        
        //  1583: getfield        com/reddit/domain/model/Link.eventEndUtc:Ljava/lang/Long;
        //  1586: aload_1        
        //  1587: getfield        com/reddit/domain/model/Link.eventEndUtc:Ljava/lang/Long;
        //  1590: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1593: ifne            1598
        //  1596: iconst_0       
        //  1597: ireturn        
        //  1598: aload_0        
        //  1599: getfield        com/reddit/domain/model/Link.isLiveStream:Z
        //  1602: aload_1        
        //  1603: getfield        com/reddit/domain/model/Link.isLiveStream:Z
        //  1606: if_icmpeq       1611
        //  1609: iconst_0       
        //  1610: ireturn        
        //  1611: aload_0        
        //  1612: getfield        com/reddit/domain/model/Link.discussionType:Lcom/reddit/domain/model/DiscussionType;
        //  1615: aload_1        
        //  1616: getfield        com/reddit/domain/model/Link.discussionType:Lcom/reddit/domain/model/DiscussionType;
        //  1619: if_acmpeq       1624
        //  1622: iconst_0       
        //  1623: ireturn        
        //  1624: aload_0        
        //  1625: getfield        com/reddit/domain/model/Link.isPollIncluded:Ljava/lang/Boolean;
        //  1628: aload_1        
        //  1629: getfield        com/reddit/domain/model/Link.isPollIncluded:Ljava/lang/Boolean;
        //  1632: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1635: ifne            1640
        //  1638: iconst_0       
        //  1639: ireturn        
        //  1640: aload_0        
        //  1641: getfield        com/reddit/domain/model/Link.adImpressionId:Ljava/lang/String;
        //  1644: aload_1        
        //  1645: getfield        com/reddit/domain/model/Link.adImpressionId:Ljava/lang/String;
        //  1648: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1651: ifne            1656
        //  1654: iconst_0       
        //  1655: ireturn        
        //  1656: aload_0        
        //  1657: getfield        com/reddit/domain/model/Link.galleryItemPosition:Ljava/lang/Integer;
        //  1660: aload_1        
        //  1661: getfield        com/reddit/domain/model/Link.galleryItemPosition:Ljava/lang/Integer;
        //  1664: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1667: ifne            1672
        //  1670: iconst_0       
        //  1671: ireturn        
        //  1672: aload_0        
        //  1673: getfield        com/reddit/domain/model/Link.appStoreData:Lcom/reddit/ads/link/models/AppStoreData;
        //  1676: aload_1        
        //  1677: getfield        com/reddit/domain/model/Link.appStoreData:Lcom/reddit/ads/link/models/AppStoreData;
        //  1680: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1683: ifne            1688
        //  1686: iconst_0       
        //  1687: ireturn        
        //  1688: aload_0        
        //  1689: getfield        com/reddit/domain/model/Link.isCreatedFromAdsUi:Ljava/lang/Boolean;
        //  1692: aload_1        
        //  1693: getfield        com/reddit/domain/model/Link.isCreatedFromAdsUi:Ljava/lang/Boolean;
        //  1696: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1699: ifne            1704
        //  1702: iconst_0       
        //  1703: ireturn        
        //  1704: aload_0        
        //  1705: getfield        com/reddit/domain/model/Link.ctaMediaColor:Ljava/lang/String;
        //  1708: aload_1        
        //  1709: getfield        com/reddit/domain/model/Link.ctaMediaColor:Ljava/lang/String;
        //  1712: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1715: ifne            1720
        //  1718: iconst_0       
        //  1719: ireturn        
        //  1720: aload_0        
        //  1721: getfield        com/reddit/domain/model/Link.isReactAllowed:Z
        //  1724: aload_1        
        //  1725: getfield        com/reddit/domain/model/Link.isReactAllowed:Z
        //  1728: if_icmpeq       1733
        //  1731: iconst_0       
        //  1732: ireturn        
        //  1733: aload_0        
        //  1734: getfield        com/reddit/domain/model/Link.reactedFromId:Ljava/lang/String;
        //  1737: aload_1        
        //  1738: getfield        com/reddit/domain/model/Link.reactedFromId:Ljava/lang/String;
        //  1741: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1744: ifne            1749
        //  1747: iconst_0       
        //  1748: ireturn        
        //  1749: aload_0        
        //  1750: getfield        com/reddit/domain/model/Link.reactedFromDisplayName:Ljava/lang/String;
        //  1753: aload_1        
        //  1754: getfield        com/reddit/domain/model/Link.reactedFromDisplayName:Ljava/lang/String;
        //  1757: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1760: ifne            1765
        //  1763: iconst_0       
        //  1764: ireturn        
        //  1765: aload_0        
        //  1766: getfield        com/reddit/domain/model/Link.postSets:Ljava/util/List;
        //  1769: aload_1        
        //  1770: getfield        com/reddit/domain/model/Link.postSets:Ljava/util/List;
        //  1773: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1776: ifne            1781
        //  1779: iconst_0       
        //  1780: ireturn        
        //  1781: aload_0        
        //  1782: getfield        com/reddit/domain/model/Link.postSetShareLimit:Ljava/lang/Integer;
        //  1785: aload_1        
        //  1786: getfield        com/reddit/domain/model/Link.postSetShareLimit:Ljava/lang/Integer;
        //  1789: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1792: ifne            1797
        //  1795: iconst_0       
        //  1796: ireturn        
        //  1797: aload_0        
        //  1798: getfield        com/reddit/domain/model/Link.postSetId:Ljava/lang/String;
        //  1801: aload_1        
        //  1802: getfield        com/reddit/domain/model/Link.postSetId:Ljava/lang/String;
        //  1805: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1808: ifne            1813
        //  1811: iconst_0       
        //  1812: ireturn        
        //  1813: aload_0        
        //  1814: getfield        com/reddit/domain/model/Link.commentsGallery:Ljava/util/List;
        //  1817: aload_1        
        //  1818: getfield        com/reddit/domain/model/Link.commentsGallery:Ljava/util/List;
        //  1821: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1824: ifne            1829
        //  1827: iconst_0       
        //  1828: ireturn        
        //  1829: aload_0        
        //  1830: getfield        com/reddit/domain/model/Link.adSupplementaryTextRichtext:Ljava/lang/String;
        //  1833: aload_1        
        //  1834: getfield        com/reddit/domain/model/Link.adSupplementaryTextRichtext:Ljava/lang/String;
        //  1837: invokestatic    ah2/f.a:(Ljava/lang/Object;Ljava/lang/Object;)Z
        //  1840: ifne            1845
        //  1843: iconst_0       
        //  1844: ireturn        
        //  1845: aload_0        
        //  1846: getfield        com/reddit/domain/model/Link.crowdControlFilterLevel:Lcom/reddit/domain/model/mod/CrowdControlFilterLevel;
        //  1849: aload_1        
        //  1850: getfield        com/reddit/domain/model/Link.crowdControlFilterLevel:Lcom/reddit/domain/model/mod/CrowdControlFilterLevel;
        //  1853: if_acmpeq       1858
        //  1856: iconst_0       
        //  1857: ireturn        
        //  1858: aload_0        
        //  1859: getfield        com/reddit/domain/model/Link.isCrowdControlFilterEnabled:Z
        //  1862: aload_1        
        //  1863: getfield        com/reddit/domain/model/Link.isCrowdControlFilterEnabled:Z
        //  1866: if_icmpeq       1871
        //  1869: iconst_0       
        //  1870: ireturn        
        //  1871: iconst_1       
        //  1872: ireturn        
        // 
        // The error that occurred was:
        // 
        // java.lang.StackOverflowError
        //     at java.util.Vector.contains(Unknown Source)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:828)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:782)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:778)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:851)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:790)
        //     at com.strobel.decompiler.ast.TypeAnalysis.doInferTypeForExpression(TypeAnalysis.java:1670)
        //     at com.strobel.decompiler.ast.TypeAnalysis.inferTypeForExpression(TypeAnalysis.java:815)
        //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:684)
        //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:667)
        //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:373)
        //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:95)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:344)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:206)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:93)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:868)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:761)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:638)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:605)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:195)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:162)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:137)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:333)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:254)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:129)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public final String getAdImpressionId() {
        return this.adImpressionId;
    }
    
    public final String getAdSupplementaryTextRichtext() {
        return this.adSupplementaryTextRichtext;
    }
    
    public final boolean getAdsShowMedia() {
        return this.adsShowMedia;
    }
    
    public String getAnalyticsLinkType() {
        return this.analyticsLinkType;
    }
    
    public final AppStoreData getAppStoreData() {
        return this.appStoreData;
    }
    
    public final boolean getApproved() {
        return this.approved;
    }
    
    public final String getApprovedBy() {
        return this.approvedBy;
    }
    
    public final boolean getArchived() {
        return this.archived;
    }
    
    public final AudioRoom getAudioRoom() {
        return this.audioRoom;
    }
    
    public final String getAuthor() {
        return this.author;
    }
    
    public final boolean getAuthorCakeday() {
        return this.authorCakeday;
    }
    
    public final String getAuthorFlairBackgroundColor() {
        return this.authorFlairBackgroundColor;
    }
    
    public final List<FlairRichTextItem> getAuthorFlairRichTextObject() {
        return this.authorFlairRichTextObject;
    }
    
    public final String getAuthorFlairTemplateId() {
        return this.authorFlairTemplateId;
    }
    
    public final String getAuthorFlairText() {
        return this.authorFlairText;
    }
    
    public final String getAuthorFlairTextColor() {
        return this.authorFlairTextColor;
    }
    
    public final String getAuthorIconUrl() {
        return this.authorIconUrl;
    }
    
    public final String getAuthorId() {
        return this.authorId;
    }
    
    public final Boolean getAuthorIsBlocked() {
        return this.authorIsBlocked;
    }
    
    public final Boolean getAuthorIsNSFW() {
        return this.authorIsNSFW;
    }
    
    public final String getAuthorSnoovatarUrl() {
        return this.authorSnoovatarUrl;
    }
    
    public final AwardLeaderboardStatus getAwardLeaderboardStatus() {
        return this.awardLeaderboardStatus;
    }
    
    public final List<Award> getAwards() {
        return this.awards;
    }
    
    public final BannedBy getBannedBy() {
        return this.bannedBy;
    }
    
    public final Preview getBlurredImagePreview() {
        return this.blurredImagePreview;
    }
    
    public final String getBody() {
        return this.body;
    }
    
    public final boolean getBrandSafe() {
        return this.brandSafe;
    }
    
    public final String getCallToAction() {
        return this.callToAction;
    }
    
    public final boolean getCanGild() {
        return this.canGild;
    }
    
    public final boolean getCanMod() {
        return this.canMod;
    }
    
    public final List<Comment> getCommentsGallery() {
        return this.commentsGallery;
    }
    
    public long getCreatedUtc() {
        return this.createdUtc;
    }
    
    public final List<Link> getCrossPostParentList() {
        return this.crossPostParentList;
    }
    
    public final CrowdControlFilterLevel getCrowdControlFilterLevel() {
        return this.crowdControlFilterLevel;
    }
    
    public final List<CrowdsourceTaggingQuestion> getCrowdsourceTaggingQuestions() {
        return this.crowdsourceTaggingQuestions;
    }
    
    public final String getCtaMediaColor() {
        return this.ctaMediaColor;
    }
    
    public final DiscussionType getDiscussionType() {
        return this.discussionType;
    }
    
    public final String getDistinguished() {
        return this.distinguished;
    }
    
    public final String getDomain() {
        return this.domain;
    }
    
    public final int getDownvoteCount() {
        return this.downvoteCount;
    }
    
    public String getEventCorrelationId() {
        return this.eventCorrelationId;
    }
    
    public final Long getEventEndUtc() {
        return this.eventEndUtc;
    }
    
    public final Long getEventStartUtc() {
        return this.eventStartUtc;
    }
    
    public final List<AdEvent> getEvents() {
        return this.events;
    }
    
    public final boolean getFollowed() {
        return this.followed;
    }
    
    public final PostGallery getGallery() {
        return this.gallery;
    }
    
    public final Integer getGalleryItemPosition() {
        return this.galleryItemPosition;
    }
    
    public final boolean getHidden() {
        return this.hidden;
    }
    
    public final boolean getHideScore() {
        return this.hideScore;
    }
    
    public String getId() {
        return this.id;
    }
    
    public final boolean getIgnoreReports() {
        return this.ignoreReports;
    }
    
    public String getKindWithId() {
        return this.kindWithId;
    }
    
    public final List<LinkCategory> getLinkCategories() {
        return this.linkCategories;
    }
    
    public final String getLinkFlairBackgroundColor() {
        return this.linkFlairBackgroundColor;
    }
    
    public final String getLinkFlairId() {
        return this.linkFlairId;
    }
    
    public final List<FlairRichTextItem> getLinkFlairRichTextObject() {
        return this.linkFlairRichTextObject;
    }
    
    public final String getLinkFlairText() {
        return this.linkFlairText;
    }
    
    public final String getLinkFlairTextColor() {
        return this.linkFlairTextColor;
    }
    
    public final LegacyAudioRoom getLiveAudio() {
        return this.liveAudio;
    }
    
    public final String getLocationName() {
        return this.locationName;
    }
    
    public final boolean getLocked() {
        return this.locked;
    }
    
    public final LinkMedia getMedia() {
        return this.media;
    }
    
    public final Map<String, MediaMetaData> getMediaMetadata() {
        return this.mediaMetadata;
    }
    
    public final NoteLabel getModNoteLabel() {
        return this.modNoteLabel;
    }
    
    public final ModQueueTriggers getModQueueTriggers() {
        return this.modQueueTriggers;
    }
    
    public final List<List<String>> getModReports() {
        return this.modReports;
    }
    
    public final long getNumComments() {
        return this.numComments;
    }
    
    public final Integer getNumReports() {
        return this.numReports;
    }
    
    public final OutboundLink getOutboundLink() {
        return this.outboundLink;
    }
    
    public final boolean getOver18() {
        return this.over18;
    }
    
    public final String getPermalink() {
        return this.permalink;
    }
    
    public final boolean getPinned() {
        return this.pinned;
    }
    
    public final PostPoll getPoll() {
        return this.poll;
    }
    
    public final String getPostHint() {
        return this.postHint;
    }
    
    public final String getPostSetId() {
        return this.postSetId;
    }
    
    public final Integer getPostSetShareLimit() {
        return this.postSetShareLimit;
    }
    
    public final List<Link> getPostSets() {
        return this.postSets;
    }
    
    public final PostPredictionsTournamentData getPredictionsTournamentData() {
        return this.predictionsTournamentData;
    }
    
    public final Preview getPreview() {
        return this.preview;
    }
    
    public final PromoLayoutType getPromoLayout() {
        return this.promoLayout;
    }
    
    public boolean getPromoted() {
        return this.promoted;
    }
    
    public final boolean getQuarantine() {
        return this.quarantine;
    }
    
    public final String getReactedFromDisplayName() {
        return this.reactedFromDisplayName;
    }
    
    public final String getReactedFromId() {
        return this.reactedFromId;
    }
    
    public final RecommendationContext getRecommendationContext() {
        return this.recommendationContext;
    }
    
    public final boolean getRemoved() {
        return this.removed;
    }
    
    public final RpanVideo getRpanVideo() {
        return this.rpanVideo;
    }
    
    public final RichTextResponse getRtjson() {
        return this.rtjson;
    }
    
    public final boolean getSaved() {
        return this.saved;
    }
    
    public final int getScore() {
        return this.score;
    }
    
    public final String getSelftext() {
        return this.selftext;
    }
    
    public final String getSelftextHtml() {
        return this.selftextHtml;
    }
    
    public final boolean getShowMedia() {
        return this.showMedia;
    }
    
    public final boolean getSpam() {
        return this.spam;
    }
    
    public final boolean getSpoiler() {
        return this.spoiler;
    }
    
    public final boolean getStickied() {
        return this.stickied;
    }
    
    public String getSubreddit() {
        return this.subreddit;
    }
    
    public final SubredditDetail getSubredditDetail() {
        return this.subredditDetail;
    }
    
    public String getSubredditId() {
        return this.subredditId;
    }
    
    public final String getSubredditNamePrefixed() {
        return this.subredditNamePrefixed;
    }
    
    public final boolean getSubscribed() {
        return this.subscribed;
    }
    
    public final String getSuggestedSort() {
        return this.suggestedSort;
    }
    
    public final String getThumbnail() {
        return this.thumbnail;
    }
    
    public String getTitle() {
        return this.title;
    }
    
    public final String getTypename() {
        return this.typename;
    }
    
    public String getUniqueId() {
        final List<AdEvent> events = this.events;
        String f = null;
        Label_0142: {
            if (events != null) {
                while (true) {
                    for (final AdEvent next : events) {
                        final AdEvent adEvent = next;
                        final int g = adEvent.g;
                        final int id = AdEvent$EventType.IMPRESSION.getId();
                        final int n = 1;
                        int n2 = 0;
                        Label_0116: {
                            if (g == id) {
                                final String f2 = adEvent.f;
                                if (f2 != null && kotlin.text.b.f2((CharSequence)f2, (CharSequence)"reddit.com", false)) {
                                    n2 = n;
                                    break Label_0116;
                                }
                            }
                            n2 = 0;
                        }
                        if (n2 != 0) {
                            final AdEvent adEvent2 = next;
                            f = f;
                            if (adEvent2 != null) {
                                f = adEvent2.f;
                            }
                            break Label_0142;
                        }
                    }
                    AdEvent next = null;
                    continue;
                }
            }
        }
        String id2;
        if ((id2 = f) == null) {
            id2 = this.getId();
        }
        return id2;
    }
    
    public final String getUnrepliableReason() {
        return this.unrepliableReason;
    }
    
    public final int getUpvoteCount() {
        return this.upvoteCount;
    }
    
    public final double getUpvoteRatio() {
        return this.upvoteRatio;
    }
    
    public final String getUrl() {
        return this.url;
    }
    
    public final List<List<String>> getUserReports() {
        return this.userReports;
    }
    
    public final Long getViewCount() {
        return this.viewCount;
    }
    
    public final VoteDirection getVoteDirection() {
        final Boolean voteState = this.voteState;
        VoteDirection voteDirection;
        if (f.a((Object)voteState, (Object)Boolean.TRUE)) {
            voteDirection = VoteDirection.UP;
        }
        else if (f.a((Object)voteState, (Object)Boolean.FALSE)) {
            voteDirection = VoteDirection.DOWN;
        }
        else {
            if (voteState != null) {
                throw new NoWhenBranchMatchedException();
            }
            voteDirection = VoteDirection.NONE;
        }
        return voteDirection;
    }
    
    public final Boolean getVoteState() {
        return this.voteState;
    }
    
    public final String getWebsocketUrl() {
        return this.websocketUrl;
    }
    
    public int hashCode() {
        final int hashCode = this.getId().hashCode();
        final int hashCode2 = this.getKindWithId().hashCode();
        final int hashCode3 = Long.hashCode(this.getCreatedUtc());
        final int hashCode4 = this.getTitle().hashCode();
        final String typename = this.typename;
        int hashCode5 = 0;
        int hashCode6;
        if (typename == null) {
            hashCode6 = 0;
        }
        else {
            hashCode6 = typename.hashCode();
        }
        final int e = s0.e(this.score, a.f(this.url, a.f(this.domain, ((hashCode4 + (hashCode3 + (hashCode2 + hashCode * 31) * 31) * 31) * 31 + hashCode6) * 31, 31), 31), 31);
        final Boolean voteState = this.voteState;
        int hashCode7;
        if (voteState == null) {
            hashCode7 = 0;
        }
        else {
            hashCode7 = voteState.hashCode();
        }
        final int c = b.c(this.numComments, s0.e(this.downvoteCount, b.a(this.upvoteRatio, s0.e(this.upvoteCount, (e + hashCode7) * 31, 31), 31), 31), 31);
        final Long viewCount = this.viewCount;
        int hashCode8;
        if (viewCount == null) {
            hashCode8 = 0;
        }
        else {
            hashCode8 = viewCount.hashCode();
        }
        final int f = a.f(this.subredditNamePrefixed, (this.getSubredditId().hashCode() + (this.getSubreddit().hashCode() + (c + hashCode8) * 31) * 31) * 31, 31);
        final String linkFlairText = this.linkFlairText;
        int hashCode9;
        if (linkFlairText == null) {
            hashCode9 = 0;
        }
        else {
            hashCode9 = linkFlairText.hashCode();
        }
        final String linkFlairId = this.linkFlairId;
        int hashCode10;
        if (linkFlairId == null) {
            hashCode10 = 0;
        }
        else {
            hashCode10 = linkFlairId.hashCode();
        }
        final String linkFlairTextColor = this.linkFlairTextColor;
        int hashCode11;
        if (linkFlairTextColor == null) {
            hashCode11 = 0;
        }
        else {
            hashCode11 = linkFlairTextColor.hashCode();
        }
        final String linkFlairBackgroundColor = this.linkFlairBackgroundColor;
        int hashCode12;
        if (linkFlairBackgroundColor == null) {
            hashCode12 = 0;
        }
        else {
            hashCode12 = linkFlairBackgroundColor.hashCode();
        }
        final List<FlairRichTextItem> linkFlairRichTextObject = this.linkFlairRichTextObject;
        int hashCode13;
        if (linkFlairRichTextObject == null) {
            hashCode13 = 0;
        }
        else {
            hashCode13 = linkFlairRichTextObject.hashCode();
        }
        final List<FlairRichTextItem> authorFlairRichTextObject = this.authorFlairRichTextObject;
        int hashCode14;
        if (authorFlairRichTextObject == null) {
            hashCode14 = 0;
        }
        else {
            hashCode14 = authorFlairRichTextObject.hashCode();
        }
        final int f2 = a.f(this.author, ((((((f + hashCode9) * 31 + hashCode10) * 31 + hashCode11) * 31 + hashCode12) * 31 + hashCode13) * 31 + hashCode14) * 31, 31);
        final String authorIconUrl = this.authorIconUrl;
        int hashCode15;
        if (authorIconUrl == null) {
            hashCode15 = 0;
        }
        else {
            hashCode15 = authorIconUrl.hashCode();
        }
        final String authorSnoovatarUrl = this.authorSnoovatarUrl;
        int hashCode16;
        if (authorSnoovatarUrl == null) {
            hashCode16 = 0;
        }
        else {
            hashCode16 = authorSnoovatarUrl.hashCode();
        }
        final int authorCakeday = this.authorCakeday ? 1 : 0;
        int n = 1;
        int n2 = authorCakeday;
        if (authorCakeday != 0) {
            n2 = 1;
        }
        final int a = a2.b.a((List)this.awards, (((f2 + hashCode15) * 31 + hashCode16) * 31 + n2) * 31, 31);
        final AwardLeaderboardStatus awardLeaderboardStatus = this.awardLeaderboardStatus;
        int hashCode17;
        if (awardLeaderboardStatus == null) {
            hashCode17 = 0;
        }
        else {
            hashCode17 = awardLeaderboardStatus.hashCode();
        }
        int over18;
        if ((over18 = (this.over18 ? 1 : 0)) != 0) {
            over18 = 1;
        }
        int spoiler;
        if ((spoiler = (this.spoiler ? 1 : 0)) != 0) {
            spoiler = 1;
        }
        final String suggestedSort = this.suggestedSort;
        int hashCode18;
        if (suggestedSort == null) {
            hashCode18 = 0;
        }
        else {
            hashCode18 = suggestedSort.hashCode();
        }
        int showMedia;
        if ((showMedia = (this.showMedia ? 1 : 0)) != 0) {
            showMedia = 1;
        }
        int adsShowMedia;
        if ((adsShowMedia = (this.adsShowMedia ? 1 : 0)) != 0) {
            adsShowMedia = 1;
        }
        final String thumbnail = this.thumbnail;
        int hashCode19;
        if (thumbnail == null) {
            hashCode19 = 0;
        }
        else {
            hashCode19 = thumbnail.hashCode();
        }
        final String body = this.body;
        int hashCode20;
        if (body == null) {
            hashCode20 = 0;
        }
        else {
            hashCode20 = body.hashCode();
        }
        final Preview preview = this.preview;
        int hashCode21;
        if (preview == null) {
            hashCode21 = 0;
        }
        else {
            hashCode21 = preview.hashCode();
        }
        final Preview blurredImagePreview = this.blurredImagePreview;
        int hashCode22;
        if (blurredImagePreview == null) {
            hashCode22 = 0;
        }
        else {
            hashCode22 = blurredImagePreview.hashCode();
        }
        final LinkMedia media = this.media;
        int hashCode23;
        if (media == null) {
            hashCode23 = 0;
        }
        else {
            hashCode23 = media.hashCode();
        }
        final int f3 = ag0.a.f(this.selftext, (((((((((((a + hashCode17) * 31 + over18) * 31 + spoiler) * 31 + hashCode18) * 31 + showMedia) * 31 + adsShowMedia) * 31 + hashCode19) * 31 + hashCode20) * 31 + hashCode21) * 31 + hashCode22) * 31 + hashCode23) * 31, 31);
        final String selftextHtml = this.selftextHtml;
        int hashCode24;
        if (selftextHtml == null) {
            hashCode24 = 0;
        }
        else {
            hashCode24 = selftextHtml.hashCode();
        }
        final int f4 = ag0.a.f(this.permalink, (f3 + hashCode24) * 31, 31);
        int isSelf;
        if ((isSelf = (this.isSelf ? 1 : 0)) != 0) {
            isSelf = 1;
        }
        final String postHint = this.postHint;
        int hashCode25;
        if (postHint == null) {
            hashCode25 = 0;
        }
        else {
            hashCode25 = postHint.hashCode();
        }
        final String authorFlairText = this.authorFlairText;
        int hashCode26;
        if (authorFlairText == null) {
            hashCode26 = 0;
        }
        else {
            hashCode26 = authorFlairText.hashCode();
        }
        final String websocketUrl = this.websocketUrl;
        int hashCode27;
        if (websocketUrl == null) {
            hashCode27 = 0;
        }
        else {
            hashCode27 = websocketUrl.hashCode();
        }
        int archived;
        if ((archived = (this.archived ? 1 : 0)) != 0) {
            archived = 1;
        }
        int locked;
        if ((locked = (this.locked ? 1 : 0)) != 0) {
            locked = 1;
        }
        int quarantine;
        if ((quarantine = (this.quarantine ? 1 : 0)) != 0) {
            quarantine = 1;
        }
        int hidden;
        if ((hidden = (this.hidden ? 1 : 0)) != 0) {
            hidden = 1;
        }
        int subscribed;
        if ((subscribed = (this.subscribed ? 1 : 0)) != 0) {
            subscribed = 1;
        }
        int saved;
        if ((saved = (this.saved ? 1 : 0)) != 0) {
            saved = 1;
        }
        int ignoreReports;
        if ((ignoreReports = (this.ignoreReports ? 1 : 0)) != 0) {
            ignoreReports = 1;
        }
        int hideScore;
        if ((hideScore = (this.hideScore ? 1 : 0)) != 0) {
            hideScore = 1;
        }
        int stickied;
        if ((stickied = (this.stickied ? 1 : 0)) != 0) {
            stickied = 1;
        }
        int pinned;
        if ((pinned = (this.pinned ? 1 : 0)) != 0) {
            pinned = 1;
        }
        int canGild;
        if ((canGild = (this.canGild ? 1 : 0)) != 0) {
            canGild = 1;
        }
        int canMod;
        if ((canMod = (this.canMod ? 1 : 0)) != 0) {
            canMod = 1;
        }
        final String distinguished = this.distinguished;
        int hashCode28;
        if (distinguished == null) {
            hashCode28 = 0;
        }
        else {
            hashCode28 = distinguished.hashCode();
        }
        final String approvedBy = this.approvedBy;
        int hashCode29;
        if (approvedBy == null) {
            hashCode29 = 0;
        }
        else {
            hashCode29 = approvedBy.hashCode();
        }
        int approved;
        if ((approved = (this.approved ? 1 : 0)) != 0) {
            approved = 1;
        }
        int removed;
        if ((removed = (this.removed ? 1 : 0)) != 0) {
            removed = 1;
        }
        int spam;
        if ((spam = (this.spam ? 1 : 0)) != 0) {
            spam = 1;
        }
        final BannedBy bannedBy = this.bannedBy;
        int hashCode30;
        if (bannedBy == null) {
            hashCode30 = 0;
        }
        else {
            hashCode30 = bannedBy.hashCode();
        }
        final Integer numReports = this.numReports;
        int hashCode31;
        if (numReports == null) {
            hashCode31 = 0;
        }
        else {
            hashCode31 = numReports.hashCode();
        }
        int brandSafe;
        if ((brandSafe = (this.brandSafe ? 1 : 0)) != 0) {
            brandSafe = 1;
        }
        int isVideo;
        if ((isVideo = (this.isVideo ? 1 : 0)) != 0) {
            isVideo = 1;
        }
        final String locationName = this.locationName;
        int hashCode32;
        if (locationName == null) {
            hashCode32 = 0;
        }
        else {
            hashCode32 = locationName.hashCode();
        }
        final int a2 = a2.b.a((List)this.userReports, a2.b.a((List)this.modReports, ((((((((((((((((((((((((((f4 + isSelf) * 31 + hashCode25) * 31 + hashCode26) * 31 + hashCode27) * 31 + archived) * 31 + locked) * 31 + quarantine) * 31 + hidden) * 31 + subscribed) * 31 + saved) * 31 + ignoreReports) * 31 + hideScore) * 31 + stickied) * 31 + pinned) * 31 + canGild) * 31 + canMod) * 31 + hashCode28) * 31 + hashCode29) * 31 + approved) * 31 + removed) * 31 + spam) * 31 + hashCode30) * 31 + hashCode31) * 31 + brandSafe) * 31 + isVideo) * 31 + hashCode32) * 31, 31), 31);
        final ModQueueTriggers modQueueTriggers = this.modQueueTriggers;
        int hashCode33;
        if (modQueueTriggers == null) {
            hashCode33 = 0;
        }
        else {
            hashCode33 = modQueueTriggers.hashCode();
        }
        final NoteLabel modNoteLabel = this.modNoteLabel;
        int hashCode34;
        if (modNoteLabel == null) {
            hashCode34 = 0;
        }
        else {
            hashCode34 = modNoteLabel.hashCode();
        }
        final List<Link> crossPostParentList = this.crossPostParentList;
        int hashCode35;
        if (crossPostParentList == null) {
            hashCode35 = 0;
        }
        else {
            hashCode35 = crossPostParentList.hashCode();
        }
        final SubredditDetail subredditDetail = this.subredditDetail;
        int hashCode36;
        if (subredditDetail == null) {
            hashCode36 = 0;
        }
        else {
            hashCode36 = subredditDetail.hashCode();
        }
        int promoted;
        if ((promoted = (this.getPromoted() ? 1 : 0)) != 0) {
            promoted = 1;
        }
        int blankAd;
        if ((blankAd = (this.isBlankAd() ? 1 : 0)) != 0) {
            blankAd = 1;
        }
        final Boolean isSurveyAd = this.isSurveyAd;
        int hashCode37;
        if (isSurveyAd == null) {
            hashCode37 = 0;
        }
        else {
            hashCode37 = isSurveyAd.hashCode();
        }
        final PromoLayoutType promoLayout = this.promoLayout;
        int hashCode38;
        if (promoLayout == null) {
            hashCode38 = 0;
        }
        else {
            hashCode38 = promoLayout.hashCode();
        }
        final List<AdEvent> events = this.events;
        int hashCode39;
        if (events == null) {
            hashCode39 = 0;
        }
        else {
            hashCode39 = events.hashCode();
        }
        final OutboundLink outboundLink = this.outboundLink;
        int hashCode40;
        if (outboundLink == null) {
            hashCode40 = 0;
        }
        else {
            hashCode40 = outboundLink.hashCode();
        }
        final String callToAction = this.callToAction;
        int hashCode41;
        if (callToAction == null) {
            hashCode41 = 0;
        }
        else {
            hashCode41 = callToAction.hashCode();
        }
        final List<LinkCategory> linkCategories = this.linkCategories;
        int hashCode42;
        if (linkCategories == null) {
            hashCode42 = 0;
        }
        else {
            hashCode42 = linkCategories.hashCode();
        }
        int isCrosspostable;
        if ((isCrosspostable = (this.isCrosspostable ? 1 : 0)) != 0) {
            isCrosspostable = 1;
        }
        final RichTextResponse rtjson = this.rtjson;
        int hashCode43;
        if (rtjson == null) {
            hashCode43 = 0;
        }
        else {
            hashCode43 = rtjson.hashCode();
        }
        final Map<String, MediaMetaData> mediaMetadata = this.mediaMetadata;
        int hashCode44;
        if (mediaMetadata == null) {
            hashCode44 = 0;
        }
        else {
            hashCode44 = mediaMetadata.hashCode();
        }
        final PostPoll poll = this.poll;
        int hashCode45;
        if (poll == null) {
            hashCode45 = 0;
        }
        else {
            hashCode45 = poll.hashCode();
        }
        final PostPredictionsTournamentData predictionsTournamentData = this.predictionsTournamentData;
        int hashCode46;
        if (predictionsTournamentData == null) {
            hashCode46 = 0;
        }
        else {
            hashCode46 = predictionsTournamentData.hashCode();
        }
        final RpanVideo rpanVideo = this.rpanVideo;
        int hashCode47;
        if (rpanVideo == null) {
            hashCode47 = 0;
        }
        else {
            hashCode47 = rpanVideo.hashCode();
        }
        final AudioRoom audioRoom = this.audioRoom;
        int hashCode48;
        if (audioRoom == null) {
            hashCode48 = 0;
        }
        else {
            hashCode48 = audioRoom.hashCode();
        }
        final LegacyAudioRoom liveAudio = this.liveAudio;
        int hashCode49;
        if (liveAudio == null) {
            hashCode49 = 0;
        }
        else {
            hashCode49 = liveAudio.hashCode();
        }
        final PostGallery gallery = this.gallery;
        int hashCode50;
        if (gallery == null) {
            hashCode50 = 0;
        }
        else {
            hashCode50 = gallery.hashCode();
        }
        final RecommendationContext recommendationContext = this.recommendationContext;
        int hashCode51;
        if (recommendationContext == null) {
            hashCode51 = 0;
        }
        else {
            hashCode51 = recommendationContext.hashCode();
        }
        final int a3 = a2.b.a((List)this.crowdsourceTaggingQuestions, ((((((((((((((((((((((a2 + hashCode33) * 31 + hashCode34) * 31 + hashCode35) * 31 + hashCode36) * 31 + promoted) * 31 + blankAd) * 31 + hashCode37) * 31 + hashCode38) * 31 + hashCode39) * 31 + hashCode40) * 31 + hashCode41) * 31 + hashCode42) * 31 + isCrosspostable) * 31 + hashCode43) * 31 + hashCode44) * 31 + hashCode45) * 31 + hashCode46) * 31 + hashCode47) * 31 + hashCode48) * 31 + hashCode49) * 31 + hashCode50) * 31 + hashCode51) * 31, 31);
        int isRead;
        if ((isRead = (this.isRead ? 1 : 0)) != 0) {
            isRead = 1;
        }
        int isSubscribed;
        if ((isSubscribed = (this.isSubscribed ? 1 : 0)) != 0) {
            isSubscribed = 1;
        }
        final String authorFlairTemplateId = this.authorFlairTemplateId;
        int hashCode52;
        if (authorFlairTemplateId == null) {
            hashCode52 = 0;
        }
        else {
            hashCode52 = authorFlairTemplateId.hashCode();
        }
        final String authorFlairBackgroundColor = this.authorFlairBackgroundColor;
        int hashCode53;
        if (authorFlairBackgroundColor == null) {
            hashCode53 = 0;
        }
        else {
            hashCode53 = authorFlairBackgroundColor.hashCode();
        }
        final String authorFlairTextColor = this.authorFlairTextColor;
        int hashCode54;
        if (authorFlairTextColor == null) {
            hashCode54 = 0;
        }
        else {
            hashCode54 = authorFlairTextColor.hashCode();
        }
        final String authorId = this.authorId;
        int hashCode55;
        if (authorId == null) {
            hashCode55 = 0;
        }
        else {
            hashCode55 = authorId.hashCode();
        }
        final Boolean authorIsNSFW = this.authorIsNSFW;
        int hashCode56;
        if (authorIsNSFW == null) {
            hashCode56 = 0;
        }
        else {
            hashCode56 = authorIsNSFW.hashCode();
        }
        final Boolean authorIsBlocked = this.authorIsBlocked;
        int hashCode57;
        if (authorIsBlocked == null) {
            hashCode57 = 0;
        }
        else {
            hashCode57 = authorIsBlocked.hashCode();
        }
        final String unrepliableReason = this.unrepliableReason;
        int hashCode58;
        if (unrepliableReason == null) {
            hashCode58 = 0;
        }
        else {
            hashCode58 = unrepliableReason.hashCode();
        }
        int followed;
        if ((followed = (this.followed ? 1 : 0)) != 0) {
            followed = 1;
        }
        final Long eventStartUtc = this.eventStartUtc;
        int hashCode59;
        if (eventStartUtc == null) {
            hashCode59 = 0;
        }
        else {
            hashCode59 = eventStartUtc.hashCode();
        }
        final Long eventEndUtc = this.eventEndUtc;
        int hashCode60;
        if (eventEndUtc == null) {
            hashCode60 = 0;
        }
        else {
            hashCode60 = eventEndUtc.hashCode();
        }
        int isLiveStream;
        if ((isLiveStream = (this.isLiveStream ? 1 : 0)) != 0) {
            isLiveStream = 1;
        }
        final DiscussionType discussionType = this.discussionType;
        int hashCode61;
        if (discussionType == null) {
            hashCode61 = 0;
        }
        else {
            hashCode61 = discussionType.hashCode();
        }
        final Boolean isPollIncluded = this.isPollIncluded;
        int hashCode62;
        if (isPollIncluded == null) {
            hashCode62 = 0;
        }
        else {
            hashCode62 = isPollIncluded.hashCode();
        }
        final String adImpressionId = this.adImpressionId;
        int hashCode63;
        if (adImpressionId == null) {
            hashCode63 = 0;
        }
        else {
            hashCode63 = adImpressionId.hashCode();
        }
        final Integer galleryItemPosition = this.galleryItemPosition;
        int hashCode64;
        if (galleryItemPosition == null) {
            hashCode64 = 0;
        }
        else {
            hashCode64 = galleryItemPosition.hashCode();
        }
        final AppStoreData appStoreData = this.appStoreData;
        int hashCode65;
        if (appStoreData == null) {
            hashCode65 = 0;
        }
        else {
            hashCode65 = appStoreData.hashCode();
        }
        final Boolean isCreatedFromAdsUi = this.isCreatedFromAdsUi;
        int hashCode66;
        if (isCreatedFromAdsUi == null) {
            hashCode66 = 0;
        }
        else {
            hashCode66 = isCreatedFromAdsUi.hashCode();
        }
        final String ctaMediaColor = this.ctaMediaColor;
        int hashCode67;
        if (ctaMediaColor == null) {
            hashCode67 = 0;
        }
        else {
            hashCode67 = ctaMediaColor.hashCode();
        }
        int isReactAllowed;
        if ((isReactAllowed = (this.isReactAllowed ? 1 : 0)) != 0) {
            isReactAllowed = 1;
        }
        final String reactedFromId = this.reactedFromId;
        int hashCode68;
        if (reactedFromId == null) {
            hashCode68 = 0;
        }
        else {
            hashCode68 = reactedFromId.hashCode();
        }
        final String reactedFromDisplayName = this.reactedFromDisplayName;
        int hashCode69;
        if (reactedFromDisplayName == null) {
            hashCode69 = 0;
        }
        else {
            hashCode69 = reactedFromDisplayName.hashCode();
        }
        final List<Link> postSets = this.postSets;
        int hashCode70;
        if (postSets == null) {
            hashCode70 = 0;
        }
        else {
            hashCode70 = postSets.hashCode();
        }
        final Integer postSetShareLimit = this.postSetShareLimit;
        int hashCode71;
        if (postSetShareLimit == null) {
            hashCode71 = 0;
        }
        else {
            hashCode71 = postSetShareLimit.hashCode();
        }
        final String postSetId = this.postSetId;
        int hashCode72;
        if (postSetId == null) {
            hashCode72 = 0;
        }
        else {
            hashCode72 = postSetId.hashCode();
        }
        final List<Comment> commentsGallery = this.commentsGallery;
        int hashCode73;
        if (commentsGallery == null) {
            hashCode73 = 0;
        }
        else {
            hashCode73 = commentsGallery.hashCode();
        }
        final String adSupplementaryTextRichtext = this.adSupplementaryTextRichtext;
        int hashCode74;
        if (adSupplementaryTextRichtext == null) {
            hashCode74 = 0;
        }
        else {
            hashCode74 = adSupplementaryTextRichtext.hashCode();
        }
        final CrowdControlFilterLevel crowdControlFilterLevel = this.crowdControlFilterLevel;
        if (crowdControlFilterLevel != null) {
            hashCode5 = crowdControlFilterLevel.hashCode();
        }
        final int isCrowdControlFilterEnabled = this.isCrowdControlFilterEnabled ? 1 : 0;
        if (isCrowdControlFilterEnabled == 0) {
            n = isCrowdControlFilterEnabled;
        }
        return (((((((((((((((((((((((((((((a3 + isRead) * 31 + isSubscribed) * 31 + hashCode52) * 31 + hashCode53) * 31 + hashCode54) * 31 + hashCode55) * 31 + hashCode56) * 31 + hashCode57) * 31 + hashCode58) * 31 + followed) * 31 + hashCode59) * 31 + hashCode60) * 31 + isLiveStream) * 31 + hashCode61) * 31 + hashCode62) * 31 + hashCode63) * 31 + hashCode64) * 31 + hashCode65) * 31 + hashCode66) * 31 + hashCode67) * 31 + isReactAllowed) * 31 + hashCode68) * 31 + hashCode69) * 31 + hashCode70) * 31 + hashCode71) * 31 + hashCode72) * 31 + hashCode73) * 31 + hashCode74) * 31 + hashCode5) * 31 + n;
    }
    
    public boolean isBlankAd() {
        return this.isBlankAd;
    }
    
    public final Boolean isCreatedFromAdsUi() {
        return this.isCreatedFromAdsUi;
    }
    
    public final boolean isCrosspostable$model_release() {
        return this.isCrosspostable;
    }
    
    public final boolean isCrowdControlFilterEnabled() {
        return this.isCrowdControlFilterEnabled;
    }
    
    public final boolean isLiveStream() {
        return this.isLiveStream;
    }
    
    public final Boolean isPollIncluded() {
        return this.isPollIncluded;
    }
    
    public final boolean isReactAllowed() {
        return this.isReactAllowed;
    }
    
    public final boolean isRead() {
        return this.isRead;
    }
    
    public final boolean isSelf() {
        return this.isSelf;
    }
    
    public final boolean isSubscribed() {
        return this.isSubscribed;
    }
    
    public final Boolean isSurveyAd() {
        return this.isSurveyAd;
    }
    
    public final boolean isVideo() {
        return this.isVideo;
    }
    
    public final boolean shouldAllowCrossposts() {
        return this.isCrosspostable && !this.getPromoted();
    }
    
    public String toString() {
        final StringBuilder k = a.k("Link(id=");
        k.append(this.getId());
        k.append(", kindWithId=");
        k.append(this.getKindWithId());
        k.append(", createdUtc=");
        k.append(this.getCreatedUtc());
        k.append(", title=");
        k.append(this.getTitle());
        k.append(", typename=");
        k.append(this.typename);
        k.append(", domain=");
        k.append(this.domain);
        k.append(", url=");
        k.append(this.url);
        k.append(", score=");
        k.append(this.score);
        k.append(", voteState=");
        k.append(this.voteState);
        k.append(", upvoteCount=");
        k.append(this.upvoteCount);
        k.append(", upvoteRatio=");
        k.append(this.upvoteRatio);
        k.append(", downvoteCount=");
        k.append(this.downvoteCount);
        k.append(", numComments=");
        k.append(this.numComments);
        k.append(", viewCount=");
        k.append(this.viewCount);
        k.append(", subreddit=");
        k.append(this.getSubreddit());
        k.append(", subredditId=");
        k.append(this.getSubredditId());
        k.append(", subredditNamePrefixed=");
        k.append(this.subredditNamePrefixed);
        k.append(", linkFlairText=");
        k.append(this.linkFlairText);
        k.append(", linkFlairId=");
        k.append(this.linkFlairId);
        k.append(", linkFlairTextColor=");
        k.append(this.linkFlairTextColor);
        k.append(", linkFlairBackgroundColor=");
        k.append(this.linkFlairBackgroundColor);
        k.append(", linkFlairRichTextObject=");
        k.append(this.linkFlairRichTextObject);
        k.append(", authorFlairRichTextObject=");
        k.append(this.authorFlairRichTextObject);
        k.append(", author=");
        k.append(this.author);
        k.append(", authorIconUrl=");
        k.append(this.authorIconUrl);
        k.append(", authorSnoovatarUrl=");
        k.append(this.authorSnoovatarUrl);
        k.append(", authorCakeday=");
        k.append(this.authorCakeday);
        k.append(", awards=");
        k.append(this.awards);
        k.append(", awardLeaderboardStatus=");
        k.append(this.awardLeaderboardStatus);
        k.append(", over18=");
        k.append(this.over18);
        k.append(", spoiler=");
        k.append(this.spoiler);
        k.append(", suggestedSort=");
        k.append(this.suggestedSort);
        k.append(", showMedia=");
        k.append(this.showMedia);
        k.append(", adsShowMedia=");
        k.append(this.adsShowMedia);
        k.append(", thumbnail=");
        k.append(this.thumbnail);
        k.append(", body=");
        k.append(this.body);
        k.append(", preview=");
        k.append(this.preview);
        k.append(", blurredImagePreview=");
        k.append(this.blurredImagePreview);
        k.append(", media=");
        k.append(this.media);
        k.append(", selftext=");
        k.append(this.selftext);
        k.append(", selftextHtml=");
        k.append(this.selftextHtml);
        k.append(", permalink=");
        k.append(this.permalink);
        k.append(", isSelf=");
        k.append(this.isSelf);
        k.append(", postHint=");
        k.append(this.postHint);
        k.append(", authorFlairText=");
        k.append(this.authorFlairText);
        k.append(", websocketUrl=");
        k.append(this.websocketUrl);
        k.append(", archived=");
        k.append(this.archived);
        k.append(", locked=");
        k.append(this.locked);
        k.append(", quarantine=");
        k.append(this.quarantine);
        k.append(", hidden=");
        k.append(this.hidden);
        k.append(", subscribed=");
        k.append(this.subscribed);
        k.append(", saved=");
        k.append(this.saved);
        k.append(", ignoreReports=");
        k.append(this.ignoreReports);
        k.append(", hideScore=");
        k.append(this.hideScore);
        k.append(", stickied=");
        k.append(this.stickied);
        k.append(", pinned=");
        k.append(this.pinned);
        k.append(", canGild=");
        k.append(this.canGild);
        k.append(", canMod=");
        k.append(this.canMod);
        k.append(", distinguished=");
        k.append(this.distinguished);
        k.append(", approvedBy=");
        k.append(this.approvedBy);
        k.append(", approved=");
        k.append(this.approved);
        k.append(", removed=");
        k.append(this.removed);
        k.append(", spam=");
        k.append(this.spam);
        k.append(", bannedBy=");
        k.append(this.bannedBy);
        k.append(", numReports=");
        k.append(this.numReports);
        k.append(", brandSafe=");
        k.append(this.brandSafe);
        k.append(", isVideo=");
        k.append(this.isVideo);
        k.append(", locationName=");
        k.append(this.locationName);
        k.append(", modReports=");
        k.append(this.modReports);
        k.append(", userReports=");
        k.append(this.userReports);
        k.append(", modQueueTriggers=");
        k.append(this.modQueueTriggers);
        k.append(", modNoteLabel=");
        k.append(this.modNoteLabel);
        k.append(", crossPostParentList=");
        k.append(this.crossPostParentList);
        k.append(", subredditDetail=");
        k.append(this.subredditDetail);
        k.append(", promoted=");
        k.append(this.getPromoted());
        k.append(", isBlankAd=");
        k.append(this.isBlankAd());
        k.append(", isSurveyAd=");
        k.append(this.isSurveyAd);
        k.append(", promoLayout=");
        k.append(this.promoLayout);
        k.append(", events=");
        k.append(this.events);
        k.append(", outboundLink=");
        k.append(this.outboundLink);
        k.append(", callToAction=");
        k.append(this.callToAction);
        k.append(", linkCategories=");
        k.append(this.linkCategories);
        k.append(", isCrosspostable=");
        k.append(this.isCrosspostable);
        k.append(", rtjson=");
        k.append(this.rtjson);
        k.append(", mediaMetadata=");
        k.append(this.mediaMetadata);
        k.append(", poll=");
        k.append(this.poll);
        k.append(", predictionsTournamentData=");
        k.append(this.predictionsTournamentData);
        k.append(", rpanVideo=");
        k.append(this.rpanVideo);
        k.append(", audioRoom=");
        k.append(this.audioRoom);
        k.append(", liveAudio=");
        k.append(this.liveAudio);
        k.append(", gallery=");
        k.append(this.gallery);
        k.append(", recommendationContext=");
        k.append(this.recommendationContext);
        k.append(", crowdsourceTaggingQuestions=");
        k.append(this.crowdsourceTaggingQuestions);
        k.append(", isRead=");
        k.append(this.isRead);
        k.append(", isSubscribed=");
        k.append(this.isSubscribed);
        k.append(", authorFlairTemplateId=");
        k.append(this.authorFlairTemplateId);
        k.append(", authorFlairBackgroundColor=");
        k.append(this.authorFlairBackgroundColor);
        k.append(", authorFlairTextColor=");
        k.append(this.authorFlairTextColor);
        k.append(", authorId=");
        k.append(this.authorId);
        k.append(", authorIsNSFW=");
        k.append(this.authorIsNSFW);
        k.append(", authorIsBlocked=");
        k.append(this.authorIsBlocked);
        k.append(", unrepliableReason=");
        k.append(this.unrepliableReason);
        k.append(", followed=");
        k.append(this.followed);
        k.append(", eventStartUtc=");
        k.append(this.eventStartUtc);
        k.append(", eventEndUtc=");
        k.append(this.eventEndUtc);
        k.append(", isLiveStream=");
        k.append(this.isLiveStream);
        k.append(", discussionType=");
        k.append(this.discussionType);
        k.append(", isPollIncluded=");
        k.append(this.isPollIncluded);
        k.append(", adImpressionId=");
        k.append(this.adImpressionId);
        k.append(", galleryItemPosition=");
        k.append(this.galleryItemPosition);
        k.append(", appStoreData=");
        k.append(this.appStoreData);
        k.append(", isCreatedFromAdsUi=");
        k.append(this.isCreatedFromAdsUi);
        k.append(", ctaMediaColor=");
        k.append(this.ctaMediaColor);
        k.append(", isReactAllowed=");
        k.append(this.isReactAllowed);
        k.append(", reactedFromId=");
        k.append(this.reactedFromId);
        k.append(", reactedFromDisplayName=");
        k.append(this.reactedFromDisplayName);
        k.append(", postSets=");
        k.append(this.postSets);
        k.append(", postSetShareLimit=");
        k.append(this.postSetShareLimit);
        k.append(", postSetId=");
        k.append(this.postSetId);
        k.append(", commentsGallery=");
        k.append(this.commentsGallery);
        k.append(", adSupplementaryTextRichtext=");
        k.append(this.adSupplementaryTextRichtext);
        k.append(", crowdControlFilterLevel=");
        k.append(this.crowdControlFilterLevel);
        k.append(", isCrowdControlFilterEnabled=");
        return s0.o(k, this.isCrowdControlFilterEnabled, ')');
    }
    
    public void writeToParcel(final Parcel parcel, final int n) {
        f.f((Object)parcel, "out");
        parcel.writeString(this.id);
        parcel.writeString(this.kindWithId);
        parcel.writeLong(this.createdUtc);
        parcel.writeString(this.title);
        parcel.writeString(this.typename);
        parcel.writeString(this.domain);
        parcel.writeString(this.url);
        parcel.writeInt(this.score);
        final Boolean voteState = this.voteState;
        if (voteState == null) {
            parcel.writeInt(0);
        }
        else {
            a.w(parcel, 1, voteState);
        }
        parcel.writeInt(this.upvoteCount);
        parcel.writeDouble(this.upvoteRatio);
        parcel.writeInt(this.downvoteCount);
        parcel.writeLong(this.numComments);
        final Long viewCount = this.viewCount;
        if (viewCount == null) {
            parcel.writeInt(0);
        }
        else {
            c.q(parcel, 1, viewCount);
        }
        parcel.writeString(this.subreddit);
        parcel.writeString(this.subredditId);
        parcel.writeString(this.subredditNamePrefixed);
        parcel.writeString(this.linkFlairText);
        parcel.writeString(this.linkFlairId);
        parcel.writeString(this.linkFlairTextColor);
        parcel.writeString(this.linkFlairBackgroundColor);
        final List<FlairRichTextItem> linkFlairRichTextObject = this.linkFlairRichTextObject;
        if (linkFlairRichTextObject == null) {
            parcel.writeInt(0);
        }
        else {
            final Iterator o = b.o(parcel, 1, (List)linkFlairRichTextObject);
            while (o.hasNext()) {
                ((FlairRichTextItem)o.next()).writeToParcel(parcel, n);
            }
        }
        final List<FlairRichTextItem> authorFlairRichTextObject = this.authorFlairRichTextObject;
        if (authorFlairRichTextObject == null) {
            parcel.writeInt(0);
        }
        else {
            final Iterator o2 = b.o(parcel, 1, (List)authorFlairRichTextObject);
            while (o2.hasNext()) {
                ((FlairRichTextItem)o2.next()).writeToParcel(parcel, n);
            }
        }
        parcel.writeString(this.author);
        parcel.writeString(this.authorIconUrl);
        parcel.writeString(this.authorSnoovatarUrl);
        parcel.writeInt((int)(this.authorCakeday ? 1 : 0));
        final Iterator n2 = a2.b.n((List)this.awards, parcel);
        while (n2.hasNext()) {
            parcel.writeParcelable((Parcelable)n2.next(), n);
        }
        parcel.writeParcelable((Parcelable)this.awardLeaderboardStatus, n);
        parcel.writeInt((int)(this.over18 ? 1 : 0));
        parcel.writeInt((int)(this.spoiler ? 1 : 0));
        parcel.writeString(this.suggestedSort);
        parcel.writeInt((int)(this.showMedia ? 1 : 0));
        parcel.writeInt((int)(this.adsShowMedia ? 1 : 0));
        parcel.writeString(this.thumbnail);
        parcel.writeString(this.body);
        final Preview preview = this.preview;
        if (preview == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            preview.writeToParcel(parcel, n);
        }
        final Preview blurredImagePreview = this.blurredImagePreview;
        if (blurredImagePreview == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            blurredImagePreview.writeToParcel(parcel, n);
        }
        final LinkMedia media = this.media;
        if (media == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            media.writeToParcel(parcel, n);
        }
        parcel.writeString(this.selftext);
        parcel.writeString(this.selftextHtml);
        parcel.writeString(this.permalink);
        parcel.writeInt((int)(this.isSelf ? 1 : 0));
        parcel.writeString(this.postHint);
        parcel.writeString(this.authorFlairText);
        parcel.writeString(this.websocketUrl);
        parcel.writeInt((int)(this.archived ? 1 : 0));
        parcel.writeInt((int)(this.locked ? 1 : 0));
        parcel.writeInt((int)(this.quarantine ? 1 : 0));
        parcel.writeInt((int)(this.hidden ? 1 : 0));
        parcel.writeInt((int)(this.subscribed ? 1 : 0));
        parcel.writeInt((int)(this.saved ? 1 : 0));
        parcel.writeInt((int)(this.ignoreReports ? 1 : 0));
        parcel.writeInt((int)(this.hideScore ? 1 : 0));
        parcel.writeInt((int)(this.stickied ? 1 : 0));
        parcel.writeInt((int)(this.pinned ? 1 : 0));
        parcel.writeInt((int)(this.canGild ? 1 : 0));
        parcel.writeInt((int)(this.canMod ? 1 : 0));
        parcel.writeString(this.distinguished);
        parcel.writeString(this.approvedBy);
        parcel.writeInt((int)(this.approved ? 1 : 0));
        parcel.writeInt((int)(this.removed ? 1 : 0));
        parcel.writeInt((int)(this.spam ? 1 : 0));
        final BannedBy bannedBy = this.bannedBy;
        if (bannedBy == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            bannedBy.writeToParcel(parcel, n);
        }
        final Integer numReports = this.numReports;
        if (numReports == null) {
            parcel.writeInt(0);
        }
        else {
            a.x(parcel, 1, numReports);
        }
        parcel.writeInt((int)(this.brandSafe ? 1 : 0));
        parcel.writeInt((int)(this.isVideo ? 1 : 0));
        parcel.writeString(this.locationName);
        final Iterator n3 = a2.b.n((List)this.modReports, parcel);
        while (n3.hasNext()) {
            parcel.writeStringList((List)n3.next());
        }
        final Iterator n4 = a2.b.n((List)this.userReports, parcel);
        while (n4.hasNext()) {
            parcel.writeStringList((List)n4.next());
        }
        final ModQueueTriggers modQueueTriggers = this.modQueueTriggers;
        if (modQueueTriggers == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            modQueueTriggers.writeToParcel(parcel, n);
        }
        parcel.writeParcelable((Parcelable)this.modNoteLabel, n);
        final List<Link> crossPostParentList = this.crossPostParentList;
        if (crossPostParentList == null) {
            parcel.writeInt(0);
        }
        else {
            final Iterator o3 = b.o(parcel, 1, (List)crossPostParentList);
            while (o3.hasNext()) {
                ((Link)o3.next()).writeToParcel(parcel, n);
            }
        }
        final SubredditDetail subredditDetail = this.subredditDetail;
        if (subredditDetail == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            subredditDetail.writeToParcel(parcel, n);
        }
        parcel.writeInt((int)(this.promoted ? 1 : 0));
        parcel.writeInt((int)(this.isBlankAd ? 1 : 0));
        final Boolean isSurveyAd = this.isSurveyAd;
        if (isSurveyAd == null) {
            parcel.writeInt(0);
        }
        else {
            a.w(parcel, 1, isSurveyAd);
        }
        final PromoLayoutType promoLayout = this.promoLayout;
        if (promoLayout == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            parcel.writeString(((Enum)promoLayout).name());
        }
        final List<AdEvent> events = this.events;
        if (events == null) {
            parcel.writeInt(0);
        }
        else {
            final Iterator o4 = b.o(parcel, 1, (List)events);
            while (o4.hasNext()) {
                parcel.writeParcelable((Parcelable)o4.next(), n);
            }
        }
        final OutboundLink outboundLink = this.outboundLink;
        if (outboundLink == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            outboundLink.writeToParcel(parcel, n);
        }
        parcel.writeString(this.callToAction);
        final List<LinkCategory> linkCategories = this.linkCategories;
        if (linkCategories == null) {
            parcel.writeInt(0);
        }
        else {
            final Iterator o5 = b.o(parcel, 1, (List)linkCategories);
            while (o5.hasNext()) {
                ((LinkCategory)o5.next()).writeToParcel(parcel, n);
            }
        }
        parcel.writeInt((int)(this.isCrosspostable ? 1 : 0));
        final RichTextResponse rtjson = this.rtjson;
        if (rtjson == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            rtjson.writeToParcel(parcel, n);
        }
        final Map<String, MediaMetaData> mediaMetadata = this.mediaMetadata;
        if (mediaMetadata == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            parcel.writeInt(mediaMetadata.size());
            for (final Map.Entry<String, V> entry : mediaMetadata.entrySet()) {
                parcel.writeString((String)entry.getKey());
                ((MediaMetaData)entry.getValue()).writeToParcel(parcel, n);
            }
        }
        final PostPoll poll = this.poll;
        if (poll == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            poll.writeToParcel(parcel, n);
        }
        final PostPredictionsTournamentData predictionsTournamentData = this.predictionsTournamentData;
        if (predictionsTournamentData == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            predictionsTournamentData.writeToParcel(parcel, n);
        }
        final RpanVideo rpanVideo = this.rpanVideo;
        if (rpanVideo == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            rpanVideo.writeToParcel(parcel, n);
        }
        final AudioRoom audioRoom = this.audioRoom;
        if (audioRoom == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            audioRoom.writeToParcel(parcel, n);
        }
        final LegacyAudioRoom liveAudio = this.liveAudio;
        if (liveAudio == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            liveAudio.writeToParcel(parcel, n);
        }
        final PostGallery gallery = this.gallery;
        if (gallery == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            gallery.writeToParcel(parcel, n);
        }
        final RecommendationContext recommendationContext = this.recommendationContext;
        if (recommendationContext == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            recommendationContext.writeToParcel(parcel, n);
        }
        final Iterator n5 = a2.b.n((List)this.crowdsourceTaggingQuestions, parcel);
        while (n5.hasNext()) {
            ((CrowdsourceTaggingQuestion)n5.next()).writeToParcel(parcel, n);
        }
        parcel.writeInt((int)(this.isRead ? 1 : 0));
        parcel.writeInt((int)(this.isSubscribed ? 1 : 0));
        parcel.writeString(this.authorFlairTemplateId);
        parcel.writeString(this.authorFlairBackgroundColor);
        parcel.writeString(this.authorFlairTextColor);
        parcel.writeString(this.authorId);
        final Boolean authorIsNSFW = this.authorIsNSFW;
        if (authorIsNSFW == null) {
            parcel.writeInt(0);
        }
        else {
            a.w(parcel, 1, authorIsNSFW);
        }
        final Boolean authorIsBlocked = this.authorIsBlocked;
        if (authorIsBlocked == null) {
            parcel.writeInt(0);
        }
        else {
            a.w(parcel, 1, authorIsBlocked);
        }
        parcel.writeString(this.unrepliableReason);
        parcel.writeInt((int)(this.followed ? 1 : 0));
        final Long eventStartUtc = this.eventStartUtc;
        if (eventStartUtc == null) {
            parcel.writeInt(0);
        }
        else {
            c.q(parcel, 1, eventStartUtc);
        }
        final Long eventEndUtc = this.eventEndUtc;
        if (eventEndUtc == null) {
            parcel.writeInt(0);
        }
        else {
            c.q(parcel, 1, eventEndUtc);
        }
        parcel.writeInt((int)(this.isLiveStream ? 1 : 0));
        final DiscussionType discussionType = this.discussionType;
        if (discussionType == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            parcel.writeString(discussionType.name());
        }
        final Boolean isPollIncluded = this.isPollIncluded;
        if (isPollIncluded == null) {
            parcel.writeInt(0);
        }
        else {
            a.w(parcel, 1, isPollIncluded);
        }
        parcel.writeString(this.adImpressionId);
        final Integer galleryItemPosition = this.galleryItemPosition;
        if (galleryItemPosition == null) {
            parcel.writeInt(0);
        }
        else {
            a.x(parcel, 1, galleryItemPosition);
        }
        parcel.writeParcelable((Parcelable)this.appStoreData, n);
        final Boolean isCreatedFromAdsUi = this.isCreatedFromAdsUi;
        if (isCreatedFromAdsUi == null) {
            parcel.writeInt(0);
        }
        else {
            a.w(parcel, 1, isCreatedFromAdsUi);
        }
        parcel.writeString(this.ctaMediaColor);
        parcel.writeInt((int)(this.isReactAllowed ? 1 : 0));
        parcel.writeString(this.reactedFromId);
        parcel.writeString(this.reactedFromDisplayName);
        final List<Link> postSets = this.postSets;
        if (postSets == null) {
            parcel.writeInt(0);
        }
        else {
            final Iterator o6 = b.o(parcel, 1, (List)postSets);
            while (o6.hasNext()) {
                ((Link)o6.next()).writeToParcel(parcel, n);
            }
        }
        final Integer postSetShareLimit = this.postSetShareLimit;
        if (postSetShareLimit == null) {
            parcel.writeInt(0);
        }
        else {
            a.x(parcel, 1, postSetShareLimit);
        }
        parcel.writeString(this.postSetId);
        final List<Comment> commentsGallery = this.commentsGallery;
        if (commentsGallery == null) {
            parcel.writeInt(0);
        }
        else {
            final Iterator o7 = b.o(parcel, 1, (List)commentsGallery);
            while (o7.hasNext()) {
                ((Comment)o7.next()).writeToParcel(parcel, n);
            }
        }
        parcel.writeString(this.adSupplementaryTextRichtext);
        final CrowdControlFilterLevel crowdControlFilterLevel = this.crowdControlFilterLevel;
        if (crowdControlFilterLevel == null) {
            parcel.writeInt(0);
        }
        else {
            parcel.writeInt(1);
            crowdControlFilterLevel.writeToParcel(parcel, n);
        }
        parcel.writeInt((int)(this.isCrowdControlFilterEnabled ? 1 : 0));
    }
    
    @Metadata(d1 = { "\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002R\u000e\u0010\u0003\u001a\u00020\u0004X\u0086T¢\u0006\u0002\n\u0000R\u000e\u0010\u0005\u001a\u00020\u0004X\u0082T¢\u0006\u0002\n\u0000¨\u0006\u0006" }, d2 = { "Lcom/reddit/domain/model/Link$Companion;", "", "()V", "DISTINGUISH_TYPE_MODERATOR", "", "REDDIT_DOMAIN", "model_release" }, k = 1, mv = { 1, 7, 1 }, xi = 48)
    public static final class Companion
    {
        private Companion() {
        }
    }
    
    @Metadata(k = 3, mv = { 1, 7, 1 }, xi = 48)
    public static final class Creator implements Parcelable$Creator<Link>
    {
        public final Link createFromParcel(final Parcel parcel) {
            f.f((Object)parcel, "parcel");
            final String string = parcel.readString();
            final String string2 = parcel.readString();
            final long long1 = parcel.readLong();
            final String string3 = parcel.readString();
            final String string4 = parcel.readString();
            final String string5 = parcel.readString();
            final String string6 = parcel.readString();
            final int int1 = parcel.readInt();
            Boolean value;
            if (parcel.readInt() == 0) {
                value = null;
            }
            else {
                value = (parcel.readInt() != 0);
            }
            final int int2 = parcel.readInt();
            final double double1 = parcel.readDouble();
            final int int3 = parcel.readInt();
            final long long2 = parcel.readLong();
            Long value2;
            if (parcel.readInt() == 0) {
                value2 = null;
            }
            else {
                value2 = parcel.readLong();
            }
            final String string7 = parcel.readString();
            final String string8 = parcel.readString();
            final String string9 = parcel.readString();
            final String string10 = parcel.readString();
            final String string11 = parcel.readString();
            final String string12 = parcel.readString();
            final String string13 = parcel.readString();
            ArrayList list;
            if (parcel.readInt() == 0) {
                list = null;
            }
            else {
                final int int4 = parcel.readInt();
                list = new ArrayList(int4);
                for (int i = 0; i != int4; i = a.c((Parcelable$Creator)FlairRichTextItem.CREATOR, parcel, list, i, 1)) {}
            }
            ArrayList list2;
            if (parcel.readInt() == 0) {
                list2 = null;
            }
            else {
                final int int5 = parcel.readInt();
                list2 = new ArrayList<FlairRichTextItem>(int5);
                for (int j = 0; j != int5; j = a.c((Parcelable$Creator)FlairRichTextItem.CREATOR, parcel, list2, j, 1)) {}
            }
            final String string14 = parcel.readString();
            final String string15 = parcel.readString();
            final String string16 = parcel.readString();
            final boolean b = parcel.readInt() != 0;
            final int int6 = parcel.readInt();
            final ArrayList list3 = new ArrayList<Award>(int6);
            int k = 0;
            final ArrayList list4 = list2;
            while (k != int6) {
                k = d.e((Class)Link.class, parcel, list3, k, 1);
            }
            final AwardLeaderboardStatus awardLeaderboardStatus = (AwardLeaderboardStatus)parcel.readParcelable(Link.class.getClassLoader());
            final boolean b2 = parcel.readInt() != 0;
            final boolean b3 = parcel.readInt() != 0;
            final String string17 = parcel.readString();
            final boolean b4 = parcel.readInt() != 0;
            final boolean b5 = parcel.readInt() != 0;
            final String string18 = parcel.readString();
            final String string19 = parcel.readString();
            Object fromParcel;
            if (parcel.readInt() == 0) {
                fromParcel = null;
            }
            else {
                fromParcel = Preview.CREATOR.createFromParcel(parcel);
            }
            final Preview preview = (Preview)fromParcel;
            Object fromParcel2;
            if (parcel.readInt() == 0) {
                fromParcel2 = null;
            }
            else {
                fromParcel2 = Preview.CREATOR.createFromParcel(parcel);
            }
            final Preview preview2 = (Preview)fromParcel2;
            Object fromParcel3;
            if (parcel.readInt() == 0) {
                fromParcel3 = null;
            }
            else {
                fromParcel3 = LinkMedia.CREATOR.createFromParcel(parcel);
            }
            final LinkMedia linkMedia = (LinkMedia)fromParcel3;
            final String string20 = parcel.readString();
            final String string21 = parcel.readString();
            final String string22 = parcel.readString();
            final boolean b6 = parcel.readInt() != 0;
            final String string23 = parcel.readString();
            final String string24 = parcel.readString();
            final String string25 = parcel.readString();
            final boolean b7 = parcel.readInt() != 0;
            final boolean b8 = parcel.readInt() != 0;
            final boolean b9 = parcel.readInt() != 0;
            final boolean b10 = parcel.readInt() != 0;
            final boolean b11 = parcel.readInt() != 0;
            final boolean b12 = parcel.readInt() != 0;
            final boolean b13 = parcel.readInt() != 0;
            final boolean b14 = parcel.readInt() != 0;
            final boolean b15 = parcel.readInt() != 0;
            final boolean b16 = parcel.readInt() != 0;
            final boolean b17 = parcel.readInt() != 0;
            final boolean b18 = parcel.readInt() != 0;
            final String string26 = parcel.readString();
            final String string27 = parcel.readString();
            final boolean b19 = parcel.readInt() != 0;
            final boolean b20 = parcel.readInt() != 0;
            final boolean b21 = parcel.readInt() != 0;
            Object fromParcel4;
            if (parcel.readInt() == 0) {
                fromParcel4 = null;
            }
            else {
                fromParcel4 = BannedBy.CREATOR.createFromParcel(parcel);
            }
            final BannedBy bannedBy = (BannedBy)fromParcel4;
            Integer value3;
            if (parcel.readInt() == 0) {
                value3 = null;
            }
            else {
                value3 = parcel.readInt();
            }
            final boolean b22 = parcel.readInt() != 0;
            final boolean b23 = parcel.readInt() != 0;
            final String string28 = parcel.readString();
            final int int7 = parcel.readInt();
            final ArrayList list5 = new ArrayList<ArrayList>(int7);
            for (int l = 0; l != int7; ++l) {
                list5.add(parcel.createStringArrayList());
            }
            final int int8 = parcel.readInt();
            final ArrayList list6 = new ArrayList<ArrayList>(int8);
            for (int n = 0; n != int8; ++n) {
                list6.add(parcel.createStringArrayList());
            }
            Object fromParcel5;
            if (parcel.readInt() == 0) {
                fromParcel5 = null;
            }
            else {
                fromParcel5 = ModQueueTriggers.CREATOR.createFromParcel(parcel);
            }
            final ModQueueTriggers modQueueTriggers = (ModQueueTriggers)fromParcel5;
            final NoteLabel noteLabel = (NoteLabel)parcel.readParcelable(Link.class.getClassLoader());
            ArrayList list7;
            boolean b24;
            if (parcel.readInt() == 0) {
                list7 = null;
                b24 = b2;
            }
            else {
                final int int9 = parcel.readInt();
                list7 = new ArrayList<Link>(int9);
                for (int c = 0; c != int9; c = a.c((Parcelable$Creator)Link.CREATOR, parcel, list7, c, 1)) {}
                b24 = b2;
            }
            Object fromParcel6;
            if (parcel.readInt() == 0) {
                fromParcel6 = null;
            }
            else {
                fromParcel6 = SubredditDetail.CREATOR.createFromParcel(parcel);
            }
            final SubredditDetail subredditDetail = (SubredditDetail)fromParcel6;
            final boolean b25 = parcel.readInt() != 0;
            final boolean b26 = parcel.readInt() != 0;
            Boolean value4;
            if (parcel.readInt() == 0) {
                value4 = null;
            }
            else {
                value4 = (parcel.readInt() != 0);
            }
            PromoLayoutType value5;
            if (parcel.readInt() == 0) {
                value5 = null;
            }
            else {
                value5 = PromoLayoutType.valueOf(parcel.readString());
            }
            ArrayList list8;
            List<AdEvent> list9;
            if (parcel.readInt() == 0) {
                list8 = list7;
                list9 = null;
            }
            else {
                final int int10 = parcel.readInt();
                final ArrayList list10 = new ArrayList<AdEvent>(int10);
                for (int e = 0; e != int10; e = d.e((Class)Link.class, parcel, list10, e, 1)) {}
                list8 = list7;
                list9 = (List<AdEvent>)list10;
            }
            Object fromParcel7;
            if (parcel.readInt() == 0) {
                fromParcel7 = null;
            }
            else {
                fromParcel7 = OutboundLink.CREATOR.createFromParcel(parcel);
            }
            final OutboundLink outboundLink = (OutboundLink)fromParcel7;
            final String string29 = parcel.readString();
            List<AdEvent> list11;
            List<LinkCategory> list12;
            if (parcel.readInt() == 0) {
                list11 = list9;
                list12 = null;
            }
            else {
                final int int11 = parcel.readInt();
                final ArrayList list13 = new ArrayList<LinkCategory>(int11);
                for (int c2 = 0; c2 != int11; c2 = a.c((Parcelable$Creator)LinkCategory.CREATOR, parcel, list13, c2, 1)) {}
                list11 = list9;
                list12 = (List<LinkCategory>)list13;
            }
            final boolean b27 = parcel.readInt() != 0;
            Object fromParcel8;
            if (parcel.readInt() == 0) {
                fromParcel8 = null;
            }
            else {
                fromParcel8 = RichTextResponse.CREATOR.createFromParcel(parcel);
            }
            final RichTextResponse richTextResponse = (RichTextResponse)fromParcel8;
            List<LinkCategory> list14;
            Map<String, MediaMetaData> map;
            if (parcel.readInt() == 0) {
                list14 = list12;
                map = null;
            }
            else {
                final int int12 = parcel.readInt();
                final LinkedHashMap linkedHashMap = new LinkedHashMap<String, MediaMetaData>(int12);
                for (int n2 = 0; n2 != int12; ++n2) {
                    linkedHashMap.put(parcel.readString(), (MediaMetaData)MediaMetaData.CREATOR.createFromParcel(parcel));
                }
                list14 = list12;
                map = (Map<String, MediaMetaData>)linkedHashMap;
            }
            Object fromParcel9;
            if (parcel.readInt() == 0) {
                fromParcel9 = null;
            }
            else {
                fromParcel9 = PostPoll.CREATOR.createFromParcel(parcel);
            }
            final PostPoll postPoll = (PostPoll)fromParcel9;
            Object fromParcel10;
            if (parcel.readInt() == 0) {
                fromParcel10 = null;
            }
            else {
                fromParcel10 = PostPredictionsTournamentData.CREATOR.createFromParcel(parcel);
            }
            final PostPredictionsTournamentData postPredictionsTournamentData = (PostPredictionsTournamentData)fromParcel10;
            Object fromParcel11;
            if (parcel.readInt() == 0) {
                fromParcel11 = null;
            }
            else {
                fromParcel11 = RpanVideo.CREATOR.createFromParcel(parcel);
            }
            final RpanVideo rpanVideo = (RpanVideo)fromParcel11;
            Object fromParcel12;
            if (parcel.readInt() == 0) {
                fromParcel12 = null;
            }
            else {
                fromParcel12 = AudioRoom.CREATOR.createFromParcel(parcel);
            }
            final AudioRoom audioRoom = (AudioRoom)fromParcel12;
            Object fromParcel13;
            if (parcel.readInt() == 0) {
                fromParcel13 = null;
            }
            else {
                fromParcel13 = LegacyAudioRoom.CREATOR.createFromParcel(parcel);
            }
            final LegacyAudioRoom legacyAudioRoom = (LegacyAudioRoom)fromParcel13;
            Object fromParcel14;
            if (parcel.readInt() == 0) {
                fromParcel14 = null;
            }
            else {
                fromParcel14 = PostGallery.CREATOR.createFromParcel(parcel);
            }
            final PostGallery postGallery = (PostGallery)fromParcel14;
            Object fromParcel15;
            if (parcel.readInt() == 0) {
                fromParcel15 = null;
            }
            else {
                fromParcel15 = RecommendationContext.CREATOR.createFromParcel(parcel);
            }
            final RecommendationContext recommendationContext = (RecommendationContext)fromParcel15;
            final int int13 = parcel.readInt();
            final ArrayList list15 = new ArrayList<CrowdsourceTaggingQuestion>(int13);
            int c3 = 0;
            final Map<String, MediaMetaData> map2 = map;
            while (c3 != int13) {
                c3 = a.c((Parcelable$Creator)CrowdsourceTaggingQuestion.CREATOR, parcel, list15, c3, 1);
            }
            final boolean b28 = parcel.readInt() != 0;
            final boolean b29 = parcel.readInt() != 0;
            final String string30 = parcel.readString();
            final String string31 = parcel.readString();
            final String string32 = parcel.readString();
            final String string33 = parcel.readString();
            Boolean value6;
            if (parcel.readInt() == 0) {
                value6 = null;
            }
            else {
                value6 = (parcel.readInt() != 0);
            }
            Boolean value7;
            if (parcel.readInt() == 0) {
                value7 = null;
            }
            else {
                value7 = (parcel.readInt() != 0);
            }
            final String string34 = parcel.readString();
            final boolean b30 = parcel.readInt() != 0;
            Long value8;
            if (parcel.readInt() == 0) {
                value8 = null;
            }
            else {
                value8 = parcel.readLong();
            }
            Long value9;
            if (parcel.readInt() == 0) {
                value9 = null;
            }
            else {
                value9 = parcel.readLong();
            }
            final boolean b31 = parcel.readInt() != 0;
            DiscussionType value10;
            if (parcel.readInt() == 0) {
                value10 = null;
            }
            else {
                value10 = DiscussionType.valueOf(parcel.readString());
            }
            Boolean value11;
            if (parcel.readInt() == 0) {
                value11 = null;
            }
            else {
                value11 = (parcel.readInt() != 0);
            }
            final String string35 = parcel.readString();
            Integer value12;
            if (parcel.readInt() == 0) {
                value12 = null;
            }
            else {
                value12 = parcel.readInt();
            }
            final AppStoreData appStoreData = (AppStoreData)parcel.readParcelable(Link.class.getClassLoader());
            Boolean value13;
            if (parcel.readInt() == 0) {
                value13 = null;
            }
            else {
                value13 = (parcel.readInt() != 0);
            }
            final String string36 = parcel.readString();
            final boolean b32 = parcel.readInt() != 0;
            final String string37 = parcel.readString();
            final String string38 = parcel.readString();
            ArrayList list16;
            if (parcel.readInt() == 0) {
                list16 = null;
            }
            else {
                final int int14 = parcel.readInt();
                list16 = new ArrayList<Link>(int14);
                for (int c4 = 0; c4 != int14; c4 = a.c((Parcelable$Creator)Link.CREATOR, parcel, list16, c4, 1)) {}
            }
            Integer value14;
            if (parcel.readInt() == 0) {
                value14 = null;
            }
            else {
                value14 = parcel.readInt();
            }
            final String string39 = parcel.readString();
            ArrayList list17;
            List<Comment> list18;
            if (parcel.readInt() == 0) {
                list17 = list16;
                list18 = null;
            }
            else {
                final int int15 = parcel.readInt();
                final ArrayList list19 = new ArrayList<Comment>(int15);
                for (int c5 = 0; c5 != int15; c5 = a.c((Parcelable$Creator)Comment.CREATOR, parcel, list19, c5, 1)) {}
                list17 = list16;
                list18 = (List<Comment>)list19;
            }
            final String string40 = parcel.readString();
            Object fromParcel16;
            if (parcel.readInt() == 0) {
                fromParcel16 = null;
            }
            else {
                fromParcel16 = CrowdControlFilterLevel.CREATOR.createFromParcel(parcel);
            }
            return new Link(string, string2, long1, string3, string4, string5, string6, int1, value, int2, double1, int3, long2, value2, string7, string8, string9, string10, string11, string12, string13, list, list4, string14, string15, string16, b, (List<Award>)list3, awardLeaderboardStatus, b24, b3, string17, b4, b5, string18, string19, preview, preview2, linkMedia, string20, string21, string22, b6, string23, string24, string25, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, string26, string27, b19, b20, b21, bannedBy, value3, b22, b23, string28, (List<? extends List<String>>)list5, (List<? extends List<String>>)list6, modQueueTriggers, noteLabel, list8, subredditDetail, b25, b26, value4, value5, list11, outboundLink, string29, list14, b27, richTextResponse, map2, postPoll, postPredictionsTournamentData, rpanVideo, audioRoom, legacyAudioRoom, postGallery, recommendationContext, (List<CrowdsourceTaggingQuestion>)list15, b28, b29, string30, string31, string32, string33, value6, value7, string34, b30, value8, value9, b31, value10, value11, string35, value12, appStoreData, value13, string36, b32, string37, string38, list17, value14, string39, list18, string40, (CrowdControlFilterLevel)fromParcel16, parcel.readInt() != 0);
        }
        
        public final Link[] newArray(final int n) {
            return new Link[n];
        }
    }
}
